<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Monolith149 Daily]]></title>
  <link href="http://kmggh.github.io/m149daily-blog//atom.xml" rel="self"/>
  <link href="http://kmggh.github.io/m149daily-blog//"/>
  <updated>2016-01-13T21:36:51-05:00</updated>
  <id>http://kmggh.github.io/m149daily-blog//</id>
  <author>
    <name><![CDATA[Ken Guyton]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Scaling AWS]]></title>
    <link href="http://kmggh.github.io/m149daily-blog//blog/2016/01/13/scaling-aws/"/>
    <updated>2016-01-13T21:21:00-05:00</updated>
    <id>http://kmggh.github.io/m149daily-blog//blog/2016/01/13/scaling-aws</id>
    <content type="html"><![CDATA[<p>From the web site High Scalability is a nice article on scaling a
service on Amazon Web Services from one to over 11 million users.
It&rsquo;s based on a talk by Joel Williams from AWS.</p>

<!-- More -->


<p>He lists  these main points.</p>

<blockquote><ul>
<li><p>Start with SQL and only move to NoSQL when necessary.</p></li>
<li><p>A consistent theme is take components and separate them out. This
allows those components to scale and fail independently. It applies to
breaking up tiers and creating microservices.</p></li>
<li><p>Only invest in tasks that differentiate you as a business, don&rsquo;t
reinvent the wheel.</p></li>
<li><p>Scalability and redundancy are not two separate concepts, you can
often do both at the same time.</p></li>
<li><p>There&rsquo;s no mention of costs. That would be a good addition to the talk
as that is one of the major criticisms of AWS solutions.</p></li>
</ul>
</blockquote>

<p>The section for just one user is also quite helpful.</p>

<blockquote><ul>
<li><p>Run on a single instance, maybe a type t2.micro. Instance types
comprise varying combinations of CPU, memory, storage, and networking
capacity and give you the flexibility to choose the appropriate mix of
resources for your applications.</p></li>
<li><p>The one instance would run the entire web stack, for example: web app,
database, management, etc.</p></li>
<li><p>Use Amazon Route 53 for the DNS.</p></li>
<li><p>Attach a single Elastic IP address to the instance.</p></li>
</ul>
</blockquote>

<p><a href="http://highscalability.com/blog/2016/1/11/a-beginners-guide-to-scaling-to-11-million-users-on-amazons.html">A Beginner&rsquo;s Guide To Scaling To 11 Million+ Users On Amazon&rsquo;s AWS</a></p>

<p><a href="https://youtu.be/vg5onp8TU6Q">AWS re:Invent 2015 | (ARC301) Scaling Up to Your First 10 Million Users</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Ultimate Amiga Talk]]></title>
    <link href="http://kmggh.github.io/m149daily-blog//blog/2016/01/08/ultimate-amiga-talk/"/>
    <updated>2016-01-08T21:57:00-05:00</updated>
    <id>http://kmggh.github.io/m149daily-blog//blog/2016/01/08/ultimate-amiga-talk</id>
    <content type="html"><![CDATA[<p>As an Amiga 1000 owner (I still have it) this talk was extremely well
done, brought back memories, and is quite accurate.</p>

<p><a href="https://youtu.be/BbVAvDbzXFk">The ultimate Amiga 500 (sic) talk</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Periodic Table Row Seven Complete]]></title>
    <link href="http://kmggh.github.io/m149daily-blog//blog/2016/01/08/periodic-table-row-seven-complete/"/>
    <updated>2016-01-08T21:52:00-05:00</updated>
    <id>http://kmggh.github.io/m149daily-blog//blog/2016/01/08/periodic-table-row-seven-complete</id>
    <content type="html"><![CDATA[<blockquote><p>Confirmation that four new elements – those with atomic numbers 113,
115, 117 and 118 – have indeed been synthesised has come from the
International Union of Pure and Applied Chemistry (Iupac), completing
the seventh row of the periodic table.</p></blockquote>

<!-- More -->


<blockquote><p>The groups credited for creating them – in Japan, Russia and the US –
have spent several years gathering enough evidence to convince experts
from Iupac and its physics equivalent, the International Union of Pure
and Applied Physics, of the elements’ existence. All four are highly
unstable superheavy metals that exist for only a fraction of a
second. They are made by bombarding heavy metal targets with beams of
ions, and can usually only be detected by measuring the radiation and
other nuclides produced as they decay.</p></blockquote>

<p><a href="http://www.rsc.org/chemistryworld/2016/01/new-elements-periodic-table-seventh-row-iupac">Confirmation of four new elements completes seventh row of periodic table</a> from the Royal Society of Chemistry by Emma Stoye.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Block Chain for Authentication]]></title>
    <link href="http://kmggh.github.io/m149daily-blog//blog/2016/01/08/block-chain-for-authentication/"/>
    <updated>2016-01-08T21:39:00-05:00</updated>
    <id>http://kmggh.github.io/m149daily-blog//blog/2016/01/08/block-chain-for-authentication</id>
    <content type="html"><![CDATA[<p>The latest rage is all about the block chain, made popular by Bitcoin.
It&rsquo;s not exactly authentication but more publication of data in a
sense that it becomes part of a sequential public record.  From that
point on, it can be looked up and verified.</p>

<!-- More -->


<p>The clever part is that the public record isn&rsquo;t posted in a particular
place or location but is distributed all over, approximately to
everyone who cares.  Since everyone has a copy, they can be verified
against each other.</p>

<p>As pointed out in the article below, it&rsquo;s like publishing a snippet
about a transaction in a newspaper which is then sent out to all
subscribers.  In this case, though, the newspaper contains all of the
transactions ever published there and just keeps adding to them.  You
can see one of the first problems right there.  This growing &ldquo;ledger&rdquo;
just keeps, well, growing.  It doesn&rsquo;t seem to scale well as they say.</p>

<p><a href="http://www.wired.co.uk/news/archive/2016-01/05/blockchain-is-the-new-signature">How the blockchain will enable self-service government</a> by Brian Forde and Michael Casey of Wired UK.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Atomic Energy Toys from the 50s]]></title>
    <link href="http://kmggh.github.io/m149daily-blog//blog/2016/01/08/atomic-energy-toys-from-the-50s/"/>
    <updated>2016-01-08T21:30:00-05:00</updated>
    <id>http://kmggh.github.io/m149daily-blog//blog/2016/01/08/atomic-energy-toys-from-the-50s</id>
    <content type="html"><![CDATA[<p><a href="http://www.orau.org/PTP/collection/atomictoys/GilbertU238Lab.htm">Gilbert U-238 Atomic Energy Lab (1950-1951)</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Raspberry Pi Much Faster Than SPARCstation 20]]></title>
    <link href="http://kmggh.github.io/m149daily-blog//blog/2016/01/08/raspberry-pi-muct-faster-than-sparcstation-20/"/>
    <updated>2016-01-08T21:27:00-05:00</updated>
    <id>http://kmggh.github.io/m149daily-blog//blog/2016/01/08/raspberry-pi-muct-faster-than-sparcstation-20</id>
    <content type="html"><![CDATA[<blockquote><p>A couple weeks back, I tweeted the following:</p>

<p>&ldquo;Turns out a Raspberry Pi now is about 6× as fast as a SPARCstation 20
was 20 years ago. And a Pi 2 is more like 15× as fast.&rdquo;</p>

<p>I was a little low in my numbers, too&mdash;they’re more like 7× and 16×
to 41× as fast&mdash;since I was going from memory!</p>

<p>Here’s how I came up with that.</p></blockquote>

<p><a href="http://eschatologist.net/blog/?p=266">Raspberry Pi vs SPARCstation 20: Fight!</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[AWS Mistakes You Should Avoid]]></title>
    <link href="http://kmggh.github.io/m149daily-blog//blog/2016/01/08/aws-mistakes-you-should-avoid/"/>
    <updated>2016-01-08T21:22:00-05:00</updated>
    <id>http://kmggh.github.io/m149daily-blog//blog/2016/01/08/aws-mistakes-you-should-avoid</id>
    <content type="html"><![CDATA[<p>Michael Wittig writes on cloudonaut.io,</p>

<blockquote><p>As an AWS Cloud Consultant I see many AWS accounts. During the year I
collected mistakes that I saw in each account and aggregated them to
provide you my best of. It turned out that the 5 most common mistakes
on AWS are:</p>

<ul>
<li>managing infrastructure manually</li>
<li>not using Auto Scaling Groups</li>
<li>not analyzing metrics in CloudWatch</li>
<li>ignoring Trusted Advisor</li>
<li>underutilizing virtual machines</li>
</ul>
</blockquote>

<p><a href="https://cloudonaut.io/5-aws-mistakes-you-should-avoid/">5 AWS Mistakes You Should Avoid</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Time To Catch Up]]></title>
    <link href="http://kmggh.github.io/m149daily-blog//blog/2016/01/08/time-to-catch-up/"/>
    <updated>2016-01-08T21:20:00-05:00</updated>
    <id>http://kmggh.github.io/m149daily-blog//blog/2016/01/08/time-to-catch-up</id>
    <content type="html"><![CDATA[<p>Okay, it&rsquo;s time to catch up.  I haven&rsquo;t posted here since November but
I&rsquo;ve been stuffing links away in Evernote so it&rsquo;s time to empty some
of those out and post them, even if they&rsquo;re a few days or weeks old.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Modern C Programming]]></title>
    <link href="http://kmggh.github.io/m149daily-blog//blog/2016/01/08/modern-c-programming/"/>
    <updated>2016-01-08T21:13:00-05:00</updated>
    <id>http://kmggh.github.io/m149daily-blog//blog/2016/01/08/modern-c-programming</id>
    <content type="html"><![CDATA[<p>It&rsquo;s been a while since I&rsquo;ve written any serious C programs, but I
found this post via Hacker News quite thorough.</p>

<p><a href="https://matt.sh/howto-c">How to C in 2016</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Meeblip Synthesizer]]></title>
    <link href="http://kmggh.github.io/m149daily-blog//blog/2015/11/21/meeblip-synthesizer/"/>
    <updated>2015-11-21T14:42:00-05:00</updated>
    <id>http://kmggh.github.io/m149daily-blog//blog/2015/11/21/meeblip-synthesizer</id>
    <content type="html"><![CDATA[<p>The Meeblip is a nifty little synthesizer with MIDI input.  If memory
serves it seems to have a set of oscillators, filters and LFO that&rsquo;s
about the same as the original Mini Moog.</p>

<p><a href="http://meeblip.com/">meeblip.com</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Write a Python Web Framework]]></title>
    <link href="http://kmggh.github.io/m149daily-blog//blog/2015/11/21/write-a-python-web-framework/"/>
    <updated>2015-11-21T05:17:00-05:00</updated>
    <id>http://kmggh.github.io/m149daily-blog//blog/2015/11/21/write-a-python-web-framework</id>
    <content type="html"><![CDATA[<p>You don&rsquo;t have to use Django, Flask, Cherrypy, or even web.py.  It&rsquo;s
all about WSGI.  Guess what.  Everything you need is already built
into Python.  After all, Python promises &ldquo;batteries included.&rdquo;</p>

<p><a href="http://funwithlinux.net/2015/11/how-to-write-a-python-web-framework-from-scratch/">How To Write a Python Web Framework From Scratch</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[PC Engines]]></title>
    <link href="http://kmggh.github.io/m149daily-blog//blog/2015/11/21/pc-engines/"/>
    <updated>2015-11-21T05:12:00-05:00</updated>
    <id>http://kmggh.github.io/m149daily-blog//blog/2015/11/21/pc-engines</id>
    <content type="html"><![CDATA[<p>These are fascinating little computer boards and boxes that seem
perfect for making firewalls and such.  Boards are available with
three gigabit ethernet ports.  Prices are in the $100 range and there
is  support for Linux, e.g., Ubuntu.  Steve Gibson mentioned them on
Security Now.</p>

<p><a href="http://pcengines.ch/">pcengines.ch</a><br />
<a href="https://twit.tv/shows/security-now/episodes/534?autostart=false">Security Now 534</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Blogging in Twitter Language]]></title>
    <link href="http://kmggh.github.io/m149daily-blog//blog/2015/11/21/blogging-in-twitter-language/"/>
    <updated>2015-11-21T04:49:00-05:00</updated>
    <id>http://kmggh.github.io/m149daily-blog//blog/2015/11/21/blogging-in-twitter-language</id>
    <content type="html"><![CDATA[<p>There&rsquo;s one thing Twitter has done and that&rsquo;s change the language of
reading news and stories so I&rsquo;m going to try an experiment.</p>

<!-- More -->


<p>Regardless of however things work out for Twitter it has had one
unmistakable effect on the way articles, essays, and other writing is
presented.  When you look at Facebook, Apple&rsquo;s News app, and almost
any site like Recode or The Verge, nearly everything looks like a
tweet.  You click on it to read the article.</p>

<p>Now, it&rsquo;s always the case that there&rsquo;s nothing new under the sun.
Headlines with snippets have been popular at least going back to the
80s, if memory serves and I&rsquo;m sure that, if I took the time to do the
research, I could find that story snippets are as old as news
publishing itself.  I believe I recall in the 80s when newspapers
started publishing a sort of index on page two of tweet-looking
headlines and snippets.  Magazines have done the same thing on their
index pages for a long time.</p>

<p>Still, the shift in the look of any story-collecting web site or, more
importantly, phone app has changed so that they all look strikingly
familiar.</p>

<p>So, at the risk of appearing as a trend follower, I&rsquo;m going to try
breaking my blog stories so that there&rsquo;s a shorter blurb on the main
page and you click to read the full story.</p>

<p>I guess there&rsquo;s a risk here when the blog post is mainly there to
share a link since you might have to click twice but maybe not.  Those
posts just won&rsquo;t have the &ldquo;Read More&rdquo; link but the actual story link
itself.  After all I can always do what I want here.  I can grow back
the main page piece as much as I want when I want.  That&rsquo;s part of
what&rsquo;s great about keeping your own blog.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Apollo 11 Restored Video]]></title>
    <link href="http://kmggh.github.io/m149daily-blog//blog/2015/11/18/apollo-11-video-restoration/"/>
    <updated>2015-11-18T06:52:00-05:00</updated>
    <id>http://kmggh.github.io/m149daily-blog//blog/2015/11/18/apollo-11-video-restoration</id>
    <content type="html"><![CDATA[<p>From Wikipedia:</p>

<blockquote><p>The Apollo 11 missing tapes refers to Apollo 11&rsquo;s slow-scan television
(SSTV) telecast recorded in its raw format on telemetry data tape
during the time of the first Moonlanding in 1969. The recordings were
discovered to be &ldquo;missing&rdquo; after a team of retired NASA employees and
contractors tried to locate the tapes in the early 2000s.</p></blockquote>

<!-- More -->


<blockquote><p>The data tapes were recorded as a backup in case the live television
broadcasts failed for any reason. In order to broadcast the SSTV
transmission on standard television, NASA ground receiving stations
performed real-time scan conversion to the NTSC television format. The
moonwalk&rsquo;s converted video signal was broadcast live around the world
on July 21, 1969 (UTC). At the time, the NTSC broadcast was recorded
on many videotapes and kinescope films: they were never missing.</p></blockquote>

<p>&hellip;</p>

<blockquote><p>Although the researchers never found the telemetry tapes they were
looking for, they did discover the best visual quality NTSC videotapes
as well as super 8 movie film taken of a video monitor in Australia,
showing the SSTV transmission before it was converted. These visual
elements were processed in 2009, as part of a NASA approved
restoration project of the first Moonwalk. At a 2009 news conference
in Washington, D.C., the research team released its findings regarding
the tapes&#8217; disappearance. They also partially released newly enhanced
footage obtained during the search. Lowry Digital completed the full
Moonwalk restoration project in late 2009.</p></blockquote>

<p><a href="https://en.wikipedia.org/wiki/Apollo_11_missing_tapes">Apollo 11 missing tapes (from Wikipedia)</a>
<a href="https://www.nasa.gov/multimedia/hd/apollo11_hdpage.html">Apollo 11 HD Videos (NASA)</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Rebuilding the HP-11 Series]]></title>
    <link href="http://kmggh.github.io/m149daily-blog//blog/2015/11/17/rebuilding-the-hp-11-series/"/>
    <updated>2015-11-17T09:03:00-05:00</updated>
    <id>http://kmggh.github.io/m149daily-blog//blog/2015/11/17/rebuilding-the-hp-11-series</id>
    <content type="html"><![CDATA[<p>Michael Steinmann of Swiss Micros is building new, little,
fully-functioning HP-11 series, and other, HP calculators.</p>

<blockquote><p>Peruse Michael’s site and you won’t find carbon copies of the
HP-12C. Instead, you’ll discover a range of miniaturised versions –
hardware emulations no less – of the most popular models in that early
generation of HP calculators, all powered by a low-power LPC1115 ARM
processor.</p></blockquote>

<p>I never owned the HP-11C though I have a nifty emulator on my iPhone.
I had owned the HP-25 and 29C before its time and later the HP-41CV
and the HP-48S.  I definitely wanted one of the little sideways 11C&rsquo;s
though.</p>

<p><a href="http://www.alphr.com/technology/1001717/the-rebirth-of-the-hp-12c-how-one-man-reimagined-a-calculator-from-1981">The rebirth of the HP-12C: How one man reimagined a calculator from 1981</a>
by Steve Cassidy on Alphr.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Upgrade to Mac OS X 10.11]]></title>
    <link href="http://kmggh.github.io/m149daily-blog//blog/2015/11/17/upgrade-to-mac-os-x-10-dot-11/"/>
    <updated>2015-11-17T08:55:00-05:00</updated>
    <id>http://kmggh.github.io/m149daily-blog//blog/2015/11/17/upgrade-to-mac-os-x-10-dot-11</id>
    <content type="html"><![CDATA[<p>I&rsquo;ve finally upgraded to Mac OS X 10.11 at home.  There&rsquo;s really not
much to say so far.  The only new/changed feature I really see and use
is Mission Control.  Ohter than that it&rsquo;s pretty much business as
usual.</p>

<p>The process went quite smoothly.  I started the download and left it
unattended.  Then I returned later and started the install and left it
running unattended.  Note that I usually never leave an upgrade
running but they did take a few minutes and I had other things to do
including even being out of the house for a while.</p>

<p>When I came back and the new login screen was presented I logged in
with no trouble and only had to enter the Apple id for iCloud.</p>

<p>There may be features I&rsquo;m using that are new or changed and I haven&rsquo;t
used them enough in the past so I&rsquo;m unaware of the differences.</p>

<p>I hear that Notes has become quite good but I&rsquo;m sticking with Evernote
and Drafts on my phone.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[KeyKOS The Nanokernel]]></title>
    <link href="http://kmggh.github.io/m149daily-blog//blog/2015/11/14/keykos-the-nanokernel/"/>
    <updated>2015-11-14T21:44:00-05:00</updated>
    <id>http://kmggh.github.io/m149daily-blog//blog/2015/11/14/keykos-the-nanokernel</id>
    <content type="html"><![CDATA[<p>I don&rsquo;t recall ever having heard of this operating system.  The ideas
sound quite interesting and nice.  There&rsquo;s a lot I have imagined in
here.</p>

<p>From the abstract:</p>

<blockquote><p>The KeyKOS nanokernel is a capability-based object-oriented operating
system that has been in production use since 1983. Its original
implementation was motivated by the need to provide security,
reliability, and 24-hour availability for applications on the Tymnet®
hosts. Requirements included the ability to run multiple
instantiations of several operating systems on a single hardware
system. KeyKOS was implemented on the System/370, and has since been
ported to the 680x0 and 88x00 processor families. Implementations of
EDX, RPS, VM, MVS, and UNIX® have been constructed. The nanokernel is
approximately 20,000 lines of C code, including capability,
checkpoint, and virtual memory support. The nanokernel itself can run
in less than 100 Kilobytes of memory.</p>

<p>KeyKOS is characterized by a small set of powerful and highly
optimized primitives that allow it to achieve performance competitive
with the macrokernel operating systems that it replaces. Objects are
exclusively invoked through protected capabilities, supporting high
levels of security and intervals between failures in excess of one
year. Messages between agents may contain both capabilities and
data. Checkpoints at tunable intervals provide system-wide backup,
fail-over support, and system restart times typically less than 30
seconds. In addition, a journaling mechanism provides support for
high-performance transaction processing. On restart, all processes are
restored to their exact state at the time of checkpoint, including
registers and virtual memory.</p></blockquote>

<p><a href="http://www.cis.upenn.edu/~KeyKOS/NanoKernel/NanoKernel.html">The KeyKOS Nanokernel Architecture</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[The Snowflake Method]]></title>
    <link href="http://kmggh.github.io/m149daily-blog//blog/2015/11/14/the-snowflake-method/"/>
    <updated>2015-11-14T21:37:00-05:00</updated>
    <id>http://kmggh.github.io/m149daily-blog//blog/2015/11/14/the-snowflake-method</id>
    <content type="html"><![CDATA[<p>The Snowflake Method for writing a novel by Randy Ingermanson is just
brilliant.  I&rsquo;m convinced this would work and it&rsquo;s so nicely done, I&rsquo;m
drawn to try it and I don&rsquo;t even want to write a novel.</p>

<p>It&rsquo;s very similar to the approach I take to writing in general,
though, and in fact I guess it&rsquo;s how I was taught to write in school.</p>

<p><a href="http://www.advancedfictionwriting.com/articles/snowflake-method/">The Snowflake Method For Designing A Novel</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Edward Tuft CSS]]></title>
    <link href="http://kmggh.github.io/m149daily-blog//blog/2015/11/14/edward-tuft-css/"/>
    <updated>2015-11-14T21:32:00-05:00</updated>
    <id>http://kmggh.github.io/m149daily-blog//blog/2015/11/14/edward-tuft-css</id>
    <content type="html"><![CDATA[<p>This is an interesting take on style, typesetting, publishing, and
CSS.  I don&rsquo;t agree with all of it but there are some nice ideas here
and the page/approach is very nice looking.</p>

<p>The main thing I disagree with is Tufte&rsquo;s strong preference for text
and prose rather than lists.  I think this is highly dependent on a
person&rsquo;s individual taste.  Also I&rsquo;m not convinced that a person who&rsquo;s
scanning an email message or document will absorb a paragraph of prose
as well as a bullet list.</p>

<p><a href="https://edwardtufte.github.io/tufte-css/">Tuft CSS</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Octopress Blogging: How Its Going]]></title>
    <link href="http://kmggh.github.io/m149daily-blog//blog/2015/11/05/octopres-blogging-how-its-going/"/>
    <updated>2015-11-05T07:02:00-05:00</updated>
    <id>http://kmggh.github.io/m149daily-blog//blog/2015/11/05/octopres-blogging-how-its-going</id>
    <content type="html"><![CDATA[<p>Well, it&rsquo;s been since 2013-06-08, a little less than 2 &frac12; years,
since I moved my blogging platform and workflow to Markdown &ndash;
Octopress &ndash; Github, with a Python program I wrote to handle most of
the process.  I guess I should also state explicitly that I&rsquo;m actually
writing in GNU Emacs.</p>

<p>For the most part I&rsquo;m really happy with the workflow and tools but I
still go through periods where I just don&rsquo;t blog much.  I often
collect links and ideas but never sit down and write about them or
even simply do the &ldquo;tweet-length&rdquo; post.  There are a few barriers to
my blogging and it seems to take something that pushes me over that
wall to get me started again.  Last year it was Gina Trapani writing
about the 30 day blogging challenge that was going around.  Today it&rsquo;s
Ihnatko&rsquo;s mention of getting back into it with his rediscovery of
MarsEdit which really simplified his workflow.</p>

<!-- More -->


<h2>Here are the good parts</h2>

<p>Writing in Emacs is great since that&rsquo;s my preferred editor.</p>

<p>My program-driven workflow is quite effective. I just run
&ldquo;blog_post.py&rdquo; with the proper arguments and it handles moving files
around and running the right programs and tools.</p>

<p>I like having all of my content in Markdown.  That was really one of
the goals in the first place, to have my writing in transportable,
somewhat long-living files that could be easily read even in their
original format.</p>

<p>The blog looks great though it is quite monochromatic and may be due
for an overhaul of some sort.</p>

<p>It&rsquo;s important that I own and control all of my content.  I&rsquo;m not
posting it on someone else&rsquo;s blog site.  Okay, granted, I <em>am</em> posting it
on Github&rsquo;s site but the Markdown source remains on my own computer
under my control.</p>

<h2>Then the worst parts</h2>

<p>Right now my workflow is a three-phased affair.</p>

<ol>
<li>Write a post file in Markdown.</li>
<li>Generate the content and publish it on my local server for review.</li>
<li>Push to the public blog hosted on Github.</li>
</ol>


<p>The writing part is great but the generate phase, especially given the
current size of the blog what it is now with 154 posts including this
one, takes around 50 seconds.</p>

<p>One way to mitigate this is to split off a separate, static archive
blog with older posts.  I think taking it up through 2014 and letting
the &ldquo;live&rdquo; version begin with 2015 would do the trick.  With a link to
the old Archive on the main blog, it should be sort of seamless.  This
would affect searching some, though.</p>

<p>I have trouble writing the short posts since I have a tendcy to be
verbose.  I sit there, think more, and write more.  Then I have to
proof read the post, review the locally published version, go back
and fix errors, even include links (which I now put at the bottom),
and occasionally add a picture.</p>

<p>When posting a picture I check the rights and make sure that proper
credit is given.</p>

<p>So all of that amounts to what I might set out to do in maybe 10
minutes becomes an hour and and half of blogging.   Is that a bad
thing?  Maybe not, but it adds to the barrier.</p>

<p>Also, my blogging isn&rsquo;t portable.  If I&rsquo;m not at home where the server
is that I actually write the markdown on, then I can&rsquo;t blog.  Well, to
be fair, of course I can <em>write</em> if I&rsquo;m away from home but I can&rsquo;t
publish.</p>

<p>I could mitigate this if I moved the blogging onto a publicly
accessible machine but then I have the problem of backing up the
files, etc.</p>

<p>I&rsquo;ve started using Dropbox a little bit for writing files (another
blog post) and I suppose I could write my files there which would make
them accessible from anywhere.  Then, back on the ranch, I could do
the publishing phase.  After all, the blog is already public so having
it there on Dropbox shouldn&rsquo;t be that big a deal.</p>

<p>But then, writing a file in <em>any</em> place and pulling it in later isn&rsquo;t
that hard.</p>

<h2>Next Steps</h2>

<p>I&rsquo;m at least going to look into splitting off the archive.  I&rsquo;ll start
the split-off blog and then later on I can migrate more posts onto it.
Maybe a good plact to split is a little more than a year back, say 1
&frac12; years?</p>

<p>I&rsquo;ll think more about putting the files on Dropbox though I&rsquo;m not sure
there&rsquo;s a big push to do this since I can always move the files into
my source directory later if I&rsquo;m away from home.</p>
]]></content>
  </entry>
  
</feed>
