<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Monolith149 Daily]]></title>
  <link href="http://kmggh.github.io/m149daily-blog//atom.xml" rel="self"/>
  <link href="http://kmggh.github.io/m149daily-blog//"/>
  <updated>2017-04-01T06:07:54-04:00</updated>
  <id>http://kmggh.github.io/m149daily-blog//</id>
  <author>
    <name><![CDATA[Ken Guyton]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[QAM]]></title>
    <link href="http://kmggh.github.io/m149daily-blog//blog/2017/04/01/qam/"/>
    <updated>2017-04-01T06:01:00-04:00</updated>
    <id>http://kmggh.github.io/m149daily-blog//blog/2017/04/01/qam</id>
    <content type="html"><![CDATA[<p>We noticed the other day how QAM (quadrature amplitude modulation) bit
rates, e.g., in optical fibre, increase by 4x at each step:  QAM16,
QAM64, QAM256.  The Wikipedia page makes why this is completely
clear.  In the digital version of QAM there&rsquo;s an NxN matrix, a
&ldquo;constellation&rdquo; of points when viewed as an amplitude and phase
angle.  Scroll down to &ldquo;Quantized QAM&rdquo; on the page to see the animated
GIF on the right.</p>

<p><a href="https://en.wikipedia.org/wiki/Quadrature_amplitude_modulation">Quadrature amplitude modulation</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Robot Arm]]></title>
    <link href="http://kmggh.github.io/m149daily-blog//blog/2017/04/01/robot-arm/"/>
    <updated>2017-04-01T05:48:00-04:00</updated>
    <id>http://kmggh.github.io/m149daily-blog//blog/2017/04/01/robot-arm</id>
    <content type="html"><![CDATA[<p>Okay an amazing robot arm made of cardboard.</p>

<p><a href="https://www.facebook.com/viralthread/videos/711880075651345/">Robot Arm (Video)</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Pluto's Blue Sky]]></title>
    <link href="http://kmggh.github.io/m149daily-blog//blog/2017/04/01/plutos-blue-sky/"/>
    <updated>2017-04-01T05:41:00-04:00</updated>
    <id>http://kmggh.github.io/m149daily-blog//blog/2017/04/01/plutos-blue-sky</id>
    <content type="html"><![CDATA[<p>&ldquo;Pluto&rsquo;s haze layer shows its blue color in this picture taken by the
New Horizons Ralph/Multispectral Visible Imaging Camera (MVIC). The
high-altitude haze is thought to be similar in nature to that seen at
Saturn’s moon Titan.&rdquo; From Nasa.gov.</p>

<!-- More -->


<p>&ldquo;The source of both hazes likely involves sunlight-initiated chemical
reactions of nitrogen and methane, leading to relatively small,
soot-like particles (called tholins) that grow as they settle toward
the surface. This image was generated by software that combines
information from blue, red and near-infrared images to replicate the
color a human eye would perceive as closely as possible.&rdquo;</p>

<p><a href="https://www.nasa.gov/image-feature/plutos-blue-sky">Pluto&rsquo;s Blue Sky</a><br />
<a href="https://arstechnica.com/science/2017/03/this-blue-sky-image-of-pluto-is-absolutely-stunning/">This blue-sky image of Pluto is absolutely stunning</a><br /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Event Horizon Telescope]]></title>
    <link href="http://kmggh.github.io/m149daily-blog//blog/2017/04/01/event-horizon-telescope/"/>
    <updated>2017-04-01T05:24:00-04:00</updated>
    <id>http://kmggh.github.io/m149daily-blog//blog/2017/04/01/event-horizon-telescope</id>
    <content type="html"><![CDATA[<p>&ldquo;On April 5-14 2017, the team behind the Event Horizon Telescope hopes
to test the fundamental theories of black-hole physics by attempting
to take the first ever image of a black hole&rsquo;s event horizon (the
point at which theory predicts nothing can escape).&rdquo; from Space.com.</p>

<!-- More -->


<blockquote><p>By connecting a
global array of radio telescopes together to form the equivalent of a
giant Earth-sized telescope – using a technique known as Very Long
Baseline Interferometry and Earth-aperture synthesis – scientists will
peer into the heart of our Milky Way galaxy where a black hole that is
4m times more massive than our sun – Sagittarius A* – lurks.</p>

<p>Astronomers know there is a disk of dust and gas orbiting around the
black hole. The path the light from this material takes will be
distorted in the gravitational field of the black hole. Its brightness
and colour are also expected to be altered in predictable ways. The
tell-tale signature astronomers hope to see with the Event Horizon
Telescope is a bright crescent shape rather than a disk. And they may
even see the shadow of the black hole&rsquo;s event horizon against the
backdrop of this brightly shining swirling material.</p></blockquote>

<p><a href="http://www.space.com/36209-astronomers-will-peer-inside-black-event-horizon-telescope.html">Astronomers to Peer Into a Black Hole for 1st Time with Event Horizon Telescope by Carole Mundell, University of Bath</a><br />
<a href="http://www.eventhorizontelescope.org">Event Horizon Telescope</a><br />
<a href="https://en.wikipedia.org/wiki/Event_Horizon_Telescope">Wikipedia</a><br />
<a href="http://www.sciencemag.org/news/2017/03/global-telescope-may-finally-see-event-horizon-our-galaxys-giant-black-hole">This global telescope may finally see the event horizon of our galaxy&rsquo;s giant black hole By Daniel Clery</a><br /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[APL Life]]></title>
    <link href="http://kmggh.github.io/m149daily-blog//blog/2017/03/28/apl-life/"/>
    <updated>2017-03-28T07:38:00-04:00</updated>
    <id>http://kmggh.github.io/m149daily-blog//blog/2017/03/28/apl-life</id>
    <content type="html"><![CDATA[<p>It&rsquo;s certainly true that Conway&rsquo;s Game of Life is one of those
wonderful toys that&rsquo;s brings joy when you take it out of the drawer
every once in a while.</p>

<p>There was a post this morning based around a Youtube video of a full
implementation of Life written in APL, as a single function of course.</p>

<!-- More -->


<p>In school we had the opportunity to dabble in APL in a survey of
languages class that was part of the typical core of computer science
classes.  There were one or two actual APL terminals in the terminal
cluster.  APL uses Greek letters along with the usual alphabet to
create a very concise and brief language and an actual APL terminal
had all of those characters on the keyboard.  If you didn&rsquo;t have an
APL terminal, then you had to resort to using short key words
instead.  Another guy on the hall of my dorm, who was an actual computer
science major (it was called information and computer science, ICS)
would go over to the cluster and play around with APL.</p>

<p>APL and LISP were the first purely functional programming languages I
had any experience with.  I knew they weren&rsquo;t like regular procedural
programs and everything was composed of functions, but I don&rsquo;t think
the term functional programming even existed then.  I also don&rsquo;t think
the dichotomy of functional programming vs. object-oriented
programming.  Smalltalk was still working through it&rsquo;s early childhood
at Xerox PARC.</p>

<p>Leap to the present and this wonderful video of the development of the
Game of Life using APL.  It&rsquo;s a joy to watch.  Don&rsquo;t be put off by the
strange Greek operators.  Watch the matrices as they are formed.  You
may feel like you&rsquo;re getting lost but, for Life enthusiasts, when he
adds the offsets to get the neighbor counts I think you&rsquo;ll see what&rsquo;s
happening.  It&rsquo;s incredibly brilliant.</p>

<p>Then Curtis Autery posted this wonderful primer on APL after
experiencing the difficulty of finding good APL information on-line.
He&rsquo;s done a great service to the language.</p>

<p><a href="https://youtu.be/a9xAKttWgP4">Conway&rsquo;s Game Of Life in APL</a><br />
<a href="https://curtisautery.appspot.com/5776042744610816">A deep dive into APL</a><br /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Binary Candles]]></title>
    <link href="http://kmggh.github.io/m149daily-blog//blog/2017/02/06/binary-candles/"/>
    <updated>2017-02-06T07:18:00-05:00</updated>
    <id>http://kmggh.github.io/m149daily-blog//blog/2017/02/06/binary-candles</id>
    <content type="html"><![CDATA[<p>I don&rsquo;t remember where I read this last week, but the idea if binary
candles is brilliant.  You can represent any age up to 127 with seven
candles!  If you understand binary, you already know what to do.</p>

<!-- More -->


<p>Each candle reprsents a number.  Just light the candles for numbers
that add up to the age you want to represent.</p>

<p>To label the candles, the first one on the right is 1.  The next is
2.  Then you just keep doubling, 4, 8, 16, 32, 64.</p>

<pre><code>    ()      ()
||  ||  ||  ||  ||  ||  ||
||  ||  ||  ||  ||  ||  ||
||  ||  ||  ||  ||  ||  ||

64  32  16   8   4   2   1
</code></pre>

<p>In the above illustration, we represent the age 40.</p>

<pre><code>        ()      ()  ()  ()
||  ||  ||  ||  ||  ||  ||
||  ||  ||  ||  ||  ||  ||
||  ||  ||  ||  ||  ||  ||

64  32  16   8   4   2   1
</code></pre>

<p>This one is 23.  You get the idea.  And, yes, you can leave off the
candles on the left if they aren&rsquo;t lit.</p>

<p>This is how computers reprsent numbers, as &ldquo;bits&rdquo; (binary digits) that
can be on or off.  Bits are typically stored as transistors acting
like switches (on or off) or storing a charge on a tiny capacitor to
represent a one, a lit candle.  When transmitting data the bits may be
represented as different voltages or other signal level schemes.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Pine 64]]></title>
    <link href="http://kmggh.github.io/m149daily-blog//blog/2017/02/06/pine-64/"/>
    <updated>2017-02-06T07:16:00-05:00</updated>
    <id>http://kmggh.github.io/m149daily-blog//blog/2017/02/06/pine-64</id>
    <content type="html"><![CDATA[<p>Another, small (some under $20) single board computer series.</p>

<p><a href="https://www.pine64.org">Pine64</a><br /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[The TTY Demystified]]></title>
    <link href="http://kmggh.github.io/m149daily-blog//blog/2017/02/06/the-tty-demystified/"/>
    <updated>2017-02-06T07:11:00-05:00</updated>
    <id>http://kmggh.github.io/m149daily-blog//blog/2017/02/06/the-tty-demystified</id>
    <content type="html"><![CDATA[<p>Though I&rsquo;d rather read a longer, more detailed history of the teletype
(which is easy to find, see Wikipedia below), this is a nice overview
of the UNIX/Linux TTY.</p>

<p><a href="http://www.linusakesson.net/programming/tty/">The TTY demystified</a><br />
<a href="https://en.wikipedia.org/wiki/Teleprinter">Teleprinter on Wikipedia</a><br /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Scaling Git at Microsoft]]></title>
    <link href="http://kmggh.github.io/m149daily-blog//blog/2017/02/06/scaling-git-at-microsoft/"/>
    <updated>2017-02-06T07:05:00-05:00</updated>
    <id>http://kmggh.github.io/m149daily-blog//blog/2017/02/06/scaling-git-at-microsoft</id>
    <content type="html"><![CDATA[<p>&ldquo;A couple of years ago, Microsoft made the decision to begin a
multi-year investment in revitalizing our engineering system across
the company.&rdquo;</p>

<!-- More -->


<p>Brian Harry discusses a single git repo with six million files.</p>

<blockquote><p>So, fast forward to today.  It works!  We have all the code from 40+
Windows Source Depot servers in a single Git repo hosted on VS Team
Services – and it’s very usable.  You can enlist in a few minutes and
do all your normal Git operations in seconds.  And, for all intents
and purposes, it’s transparent.  It’s just Git.  Your devs keep
working the way they work, using the tools they use.  Your builds just
work.</p>

<p>As a side effect, this approach also has some very nice
characteristics for large binary files.  It doesn’t extend Git with a
new mechanism like LFS does, no turds, etc.  It allows you to treat
large binary files like any other file but it only downloads the blobs
you actually ever touch.</p></blockquote>

<p><a href="https://blogs.msdn.microsoft.com/bharry/2017/02/03/scaling-git-and-some-back-story/">Scaling Git (and some back story)</a><br /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Flame Graphs]]></title>
    <link href="http://kmggh.github.io/m149daily-blog//blog/2017/02/06/flame-graphs/"/>
    <updated>2017-02-06T07:02:00-05:00</updated>
    <id>http://kmggh.github.io/m149daily-blog//blog/2017/02/06/flame-graphs</id>
    <content type="html"><![CDATA[<p>This post on flame graphs is an interesting data visualization used,
in this case, for plotting disk usage.</p>

<p><a href="http://www.brendangregg.com/blog/2017-02-05/file-system-flame-graph.html">Flame graphs for file systems</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ARM Processor Assembly Language]]></title>
    <link href="http://kmggh.github.io/m149daily-blog//blog/2017/01/27/arm-processor-assembly-language/"/>
    <updated>2017-01-27T05:05:00-05:00</updated>
    <id>http://kmggh.github.io/m149daily-blog//blog/2017/01/27/arm-processor-assembly-language</id>
    <content type="html"><![CDATA[<p>The ARM is one of the most popular processors today.  Think the
iPhone, Raspberry Pi.  I decided I should learn more about it since I
knew almost nothing about the ARM architecture.</p>

<!-- More -->


<p>From Wikipedia, &ldquo;In 2005, about 98% of all mobile phones sold used at
least one ARM processor. In 2010, producers of chips based on ARM
architectures reported shipments of 6.1 billion ARM-based processors,
representing 95% of smartphones, 35% of digital televisions and
set-top boxes and 10% of mobile computers. In 2011, the 32-bit ARM
architecture was the most widely used architecture in mobile devices
and the most popular 32-bit one in embedded systems. In 2013, 10
billion were produced and &lsquo;ARM-based chips are found in nearly 60
percent of the world’s mobile devices.&rsquo;&rdquo;</p>

<p>The short version is the following.  The ARM 32-bit processor has 16
general purpose 32-bit registers, though R14 and R15 are the stack
pointer and program counter, with an orthogonal set of instructions.
There&rsquo;s the so-called &ldquo;Thumb&rdquo; set of instructions.  If you use this
subset, the instructions can be &ldquo;compressed&rdquo; into 16-bit instructions.</p>

<p>Orthogonal means you don&rsquo;t need dedicated instructions for particular
registers, e.g., &ldquo;LDA&rdquo; to load a value into the accumulator, or &ldquo;STX&rdquo;
to store a value from an X index register into a memory location.
These instructions look like &ldquo;MOV R2, R3&rdquo; to move a value from R3 into
R2.</p>

<p>At some point it occurred to me that it should be pretty
straightforward to write and run assembler on a Raspberry Pi running
Raspbian Linux.  Voilà!</p>

<p>There&rsquo;s an excellent series called &ldquo;ARM Assembler in Raspberry Pi.&rdquo;
The posts are broken out into small chapters.  This set of examples
uses the gcc compiler to assemble .s files.  It pulls in the C
overhead to make an executable file.</p>

<h2>First Program</h2>

<p>Here&rsquo;s my first program</p>

<pre><code>.global main

main:            
    mov r0, #2  /* Put 2 in register r0. */
    bx lr       /* Return from main. */
</code></pre>

<p>To assemble and build it:</p>

<pre><code>as -o first.o first.s
gcc -o first first.o

pi&gt; ls -l
total 20
-rwxr-xr-x 1 pi pi 5564 Jan 14 21:38 first
-rw-r--r-- 1 pi pi  640 Jan 14 21:37 first.o
-rw-r--r-- 1 pi pi  193 Jan 14 21:37 first.s
</code></pre>

<p>Run.  The answer is the return code from the program.</p>

<pre><code>pi&gt; ./first
pi&gt; ./first ; echo $?
2
</code></pre>

<p>I found another excellent tutorial by Derek Banas on YouTube which
showed how to use the Linux &ldquo;ld(1)&rdquo; command to load (link) the
assembled .o file which has much lower overhead than using the gcc
compiler.  Of course, how could I have forgotten ld.</p>

<p><a href="https://www.arm.com/products/processors/instruction-set-architectures/index.php">ARM Processor Architecture</a><br />
<a href="https://en.wikipedia.org/wiki/ARM_architecture">Wikipedia: ARM architecture</a><br />
<a href="http://thinkingeek.com/2013/01/09/arm-assembler-raspberry-pi-chapter%E2%80%931/">ARM assembler in Raspberry Pi &ndash; Chapter 1</a><br />
<a href="http://www.davespace.co.uk/arm/introduction-to-arm/">Introduction to ARM</a><br />
<a href="https://youtu.be/ViNnfoE56V8">Assembly Language Tutorial (Video)</a><br /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Raspberry Pi Device Driver]]></title>
    <link href="http://kmggh.github.io/m149daily-blog//blog/2017/01/27/raspberry-pi-device-driver/"/>
    <updated>2017-01-27T05:02:00-05:00</updated>
    <id>http://kmggh.github.io/m149daily-blog//blog/2017/01/27/raspberry-pi-device-driver</id>
    <content type="html"><![CDATA[<p>I was looking to learn at least the basics of the ARM processor and
found some wondeful references and tutorials to ARM assembly
language.  The one thing left was how device I/O works.  Here&rsquo;s a
simple device driver code project for Linux on ARM in, of course, the
Raspberry Pi.</p>

<p><a href="https://www.codeproject.com/Articles/1032794/Simple-I-O-device-driver-for-RaspberryPi">Simple I/O device driver for RaspberryPi</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[InterPlanetary File System]]></title>
    <link href="http://kmggh.github.io/m149daily-blog//blog/2017/01/27/interplanetary-file-system/"/>
    <updated>2017-01-27T04:55:00-05:00</updated>
    <id>http://kmggh.github.io/m149daily-blog//blog/2017/01/27/interplanetary-file-system</id>
    <content type="html"><![CDATA[<p>&ldquo;IPFS is a distributed file system that seeks to connect all computing
devices with the same system of files. In some ways, this is similar
to the original aims of the Web, but IPFS is actually more similar to
a single bittorrent swarm exchanging git objects.&rdquo;</p>

<!-- More -->


<p>According to the Github README, IPFS is a protocol, filesystem, web,
it&rsquo;s modular, uses crypto, is p2p, is a cdn, and has a name service.</p>

<p>&ldquo;Today, there is one main IPFS Protocol implementation (in Go) with
more on the way (Javascript, and Python).&rdquo;</p>

<p><a href="https://github.com/ipfs/ipfs">IPFS &ndash; The Permanent Web</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Flight Problems]]></title>
    <link href="http://kmggh.github.io/m149daily-blog//blog/2017/01/27/flight-problems/"/>
    <updated>2017-01-27T04:51:00-05:00</updated>
    <id>http://kmggh.github.io/m149daily-blog//blog/2017/01/27/flight-problems</id>
    <content type="html"><![CDATA[<p>Iain Thomson on &ldquo;This Week in Tech&rdquo; listed an amusing flight problem
you don&rsquo;t want to experience:  &ldquo;A reduction in the number of wings.&rdquo;</p>

<p><a href="https://twit.tv/shows/this-week-in-tech/episodes/598?autostart=false">TWiT Episode 598</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Deep Seated Container Vulnerability]]></title>
    <link href="http://kmggh.github.io/m149daily-blog//blog/2017/01/27/deep-seated-container-vulnerability/"/>
    <updated>2017-01-27T04:40:00-05:00</updated>
    <id>http://kmggh.github.io/m149daily-blog//blog/2017/01/27/deep-seated-container-vulnerability</id>
    <content type="html"><![CDATA[<p>&ldquo;A vulnerability in container operations has been brought to light by
Docker and other parties and illustrates why lack of multiple years of
experience with containers makes some implementers cautious. A command
to execute the RunC part of the Linux kernel under rare but
exploitable circumstances can result in a container process getting a
chance to inspect file descriptors on the host.&rdquo;</p>

<p><a href="http://www.informationweek.com/cloud/infrastructure-as-a-service/deep-seated-container-vulnerability-found-corrected/d/d-id/1327917">Deep-Seated Container Vulnerability Found, Corrected</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Danger: Effective Gmail Phishing]]></title>
    <link href="http://kmggh.github.io/m149daily-blog//blog/2017/01/16/danger-effective-gmail-phishing/"/>
    <updated>2017-01-16T22:07:00-05:00</updated>
    <id>http://kmggh.github.io/m149daily-blog//blog/2017/01/16/danger-effective-gmail-phishing</id>
    <content type="html"><![CDATA[<p>&ldquo;Wide Impact: Highly Effective Gmail Phishing Technique Being Exploited
by Mark Maunder&rdquo;</p>

<p>This is pretty insidious.  You get a message from someome you know.
It has an attachment.  You try to open it but up pops a Gmail login
page asking you to enter your password again for security.  That Gmail
login page is fake and your password is stolen as soon as you type it
in.</p>

<p><a href="https://www.wordfence.com/blog/2017/01/gmail-phishing-data-uri/">Effective Gmail Phishing</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Amazon's Glacier Secret]]></title>
    <link href="http://kmggh.github.io/m149daily-blog//blog/2017/01/16/amazons-glacier-secret/"/>
    <updated>2017-01-16T22:03:00-05:00</updated>
    <id>http://kmggh.github.io/m149daily-blog//blog/2017/01/16/amazons-glacier-secret</id>
    <content type="html"><![CDATA[<p>BDXL.</p>

<p><a href="https://storagemojo.com/2014/04/25/amazons-glacier-secret-bdxl/">Amazon’s Glacier secret: BDXL by Robin Harris, Storage Mojo</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Happy Winter Solstice]]></title>
    <link href="http://kmggh.github.io/m149daily-blog//blog/2016/12/21/happy-winter-solstice/"/>
    <updated>2016-12-21T12:33:00-05:00</updated>
    <id>http://kmggh.github.io/m149daily-blog//blog/2016/12/21/happy-winter-solstice</id>
    <content type="html"><![CDATA[<p>Happy Winter Solstice!  It was at 5:44 EST this morning.</p>

<pre><code>Wed 2016-12-21 10:44 +0000
Wed 2016-12-21 05:44 -0500
</code></pre>

<p><a href="http://earthsky.org/earth/everything-you-need-to-know-december-solstice">December solstice 2016 is the 21st</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Flight Gear]]></title>
    <link href="http://kmggh.github.io/m149daily-blog//blog/2016/12/20/flight-gear/"/>
    <updated>2016-12-20T15:05:00-05:00</updated>
    <id>http://kmggh.github.io/m149daily-blog//blog/2016/12/20/flight-gear</id>
    <content type="html"><![CDATA[<p>I just recently learned from Andy Ihnatko on &ldquo;Macbreak Weekly&rdquo; that
there is an open source flight simulator called &ldquo;Flight Gear.&rdquo;  It
seems quite capable with many add-ons provided.</p>

<p><a href="http://www.flightgear.org">FlightGear.org</a><br />
<a href="https://en.wikipedia.org/wiki/FlightGear">FlightGear on Wikipedia</a><br /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[USENIX Computing Systems]]></title>
    <link href="http://kmggh.github.io/m149daily-blog//blog/2016/12/20/usenix-computing-systems/"/>
    <updated>2016-12-20T15:02:00-05:00</updated>
    <id>http://kmggh.github.io/m149daily-blog//blog/2016/12/20/usenix-computing-systems</id>
    <content type="html"><![CDATA[<p>For many years I received the USENIX &ldquo;Computing Systems&rdquo; journal and
recently, when doing I search, I discovered the entire archive is
on-line.</p>

<p><a href="https://www.usenix.org/publications/compsystems/computing-systems">Computing Systems</a></p>
]]></content>
  </entry>
  
</feed>
