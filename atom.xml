<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Monolith149 Daily]]></title>
  <link href="http://kmggh.github.io/m149daily-blog//atom.xml" rel="self"/>
  <link href="http://kmggh.github.io/m149daily-blog//"/>
  <updated>2016-09-23T23:30:45-04:00</updated>
  <id>http://kmggh.github.io/m149daily-blog//</id>
  <author>
    <name><![CDATA[Ken Guyton]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Pictures of Telescopes by Telescopes]]></title>
    <link href="http://kmggh.github.io/m149daily-blog//blog/2016/09/23/pictures-of-telescopes-by-telescopes/"/>
    <updated>2016-09-23T23:23:00-04:00</updated>
    <id>http://kmggh.github.io/m149daily-blog//blog/2016/09/23/pictures-of-telescopes-by-telescopes</id>
    <content type="html"><![CDATA[<p>This outstanding article by Emily Gilbert in Medium shows pictures of
observatories made from orbiting telescopes.</p>

<p><a href="https://medium.com/planet-stories/pictures-of-telescopes-by-telescopes-ed0d2bf387c1#.lb1abjpwi">Pictures of Telescopes by Telescopes</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[No Microservices?]]></title>
    <link href="http://kmggh.github.io/m149daily-blog//blog/2016/09/23/no-microservices/"/>
    <updated>2016-09-23T23:02:00-04:00</updated>
    <id>http://kmggh.github.io/m149daily-blog//blog/2016/09/23/no-microservices</id>
    <content type="html"><![CDATA[<p>An article titled &ldquo;Microservices – Please, don’t&rdquo; caught my eye, but I
think the author has it wrong.  It&rsquo;s true we&rsquo;ve been using the micro
service approach at work, building REST/JSON servers to provice APIs,
and I have been questioning whether this is the best approach.</p>

<!-- More -->


<p>This author says that these are &ldquo;truths&rdquo; &ldquo;that people believe about
this approach&hellip;.&rdquo;</p>

<ol>
<li>It keeps the code cleaner</li>
<li>It’s easy to write things that only have one purpose</li>
<li>They’re faster than monoliths</li>
<li>It’s easy for engineers to not all work in the same codebase</li>
<li>It’s the simplest way to handle autoscaling, plus Docker is in here somewhere</li>
</ol>


<p>None of these have ever been my motivation for micro services.   I
never thought 1. was the case.  Clean code is the result of good style
and discipline, and readability in writing code.</p>

<p>Similarly, I&rsquo;m not sure what 2. has to do with micro services.  I can
write modules, objects, or functions that have only one purpose.</p>

<p>I never thought 3. was true but actually the opposite.  We&rsquo;re
replacing a local function call with a network transaction.</p>

<p>Similarly, 4. is also just not true.  Whether micro services are in
the picture or not, I take it as a given that code is properly divided
into reasonable components with well-defined interfaces and that are
loosely coupled.</p>

<p>I doubt that 5. is true, but it might be.  Scale has never been a
consideration in my thinking about micro services.</p>

<p>Here are some reasons that have been part of my thought process.</p>

<ol>
<li><p>The API is language independent.  A program written in Java can
send an HTTP request as easily as a Python program, or a program in
any other language can.</p></li>
<li><p>The API is easy to test with something as simple as curl.</p></li>
<li><p>The API and HTTP request can cross network boundaries and into
different security domains, if permission is set up.</p></li>
<li><p>If a component needs to be recompiled, the micro services don&rsquo;t
need to be recompiled.</p></li>
<li><p>The micro service can be updated independently of the using code and
the clients all get the update immediately and with no changes.</p></li>
</ol>


<p>There are downsides I have worried about, though.  They include
standing up and maintaining so many services along with a lot of extra
network traffic.  It&rsquo;s also true that a well written library module is
easier to use and test in many ways.  The recompiling is not
necessarily a large cost.</p>

<p>On a very recent project at work, we went back to using libraries for
all of the application layers and components.  It&rsquo;s nice not to have
to stand up those services, but I&rsquo;ll find out if I miss some of those
advantages of the micro services.</p>

<h2>References</h2>

<p><a href="http://basho.com/posts/technical/microservices-please-dont/">Microservices – Please, don’t</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Time for Python 3]]></title>
    <link href="http://kmggh.github.io/m149daily-blog//blog/2016/09/23/time-for-python-3/"/>
    <updated>2016-09-23T20:07:00-04:00</updated>
    <id>http://kmggh.github.io/m149daily-blog//blog/2016/09/23/time-for-python-3</id>
    <content type="html"><![CDATA[<p>In watching Pycon 2016 vidoes and other reading, I&rsquo;ve been struck with
the notion that it&rsquo;s actually time to move to Python 3.  More than
once in the sessions I&rsquo;ve heard a comment like &ldquo;We&rsquo;ll be using Python
3.  If you haven&rsquo;t moved to Python 3 yet, what&rsquo;s stopping you?&rdquo;</p>

<!-- More -->


<p>Good question.  There&rsquo;s the issue of some libraries not supporting
Python 3 but, in my humble beginnings, I haven&rsquo;t run into any yet.</p>

<p>Strings and UTF-8 are by far the stickiest set of issues I&rsquo;ve
encountered, but it&rsquo;s usually just a case of fixing them.  And really
I&rsquo;ve only tried converting one old program.  For new programs I&rsquo;m more
and more starting them right off in Python 3.</p>

<p>However, it&rsquo;s really recommended that you write code that runs in
both.  That takes a bit more effort and is a little more tricky.</p>

<p>Stay tuned.  I&rsquo;ll maybe update on that part next.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Jekyll]]></title>
    <link href="http://kmggh.github.io/m149daily-blog//blog/2016/09/23/jekyll/"/>
    <updated>2016-09-23T20:05:00-04:00</updated>
    <id>http://kmggh.github.io/m149daily-blog//blog/2016/09/23/jekyll</id>
    <content type="html"><![CDATA[<p>I&rsquo;m not too familiar with Cloudflare but Jekyll, via Octopress, and
Github pages are what I use for this blog.</p>

<p><a href="http://adgllorente.com/2016/09/put-yourself-on-internet-with-jekyll-github-and-cloudflare/">Put yourself on internet with Jekyll, GitHub and Cloudflare</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Python Videos]]></title>
    <link href="http://kmggh.github.io/m149daily-blog//blog/2016/09/20/python-videos/"/>
    <updated>2016-09-20T23:42:00-04:00</updated>
    <id>http://kmggh.github.io/m149daily-blog//blog/2016/09/20/python-videos</id>
    <content type="html"><![CDATA[<p>Lately I&rsquo;ve been watching some of the videos from Pycon and have found
these to be quite excellent.</p>

<!-- More -->


<ul>
<li><a href="https://youtu.be/G-uKNd5TSBw">Keynote &ndash; Guido van Rossum &ndash; PyCon 2015</a></li>
<li><a href="https://youtu.be/YgtL4S7Hrwo">Guido van Rossum &ndash; Python Language &ndash; PyCon 2016</a></li>
<li><a href="https://youtu.be/KPzDX5TX5HE">Brett Cannon &ndash; How to make your code Python 2/3 compatible &ndash; PyCon 2015</a></li>
<li><a href="https://youtu.be/k55d3ZUF3ZQ">Luciano Ramalho &ndash; Pythonic Objects: Implementing Productive APIs</a></li>
<li><a href="https://youtu.be/6zQAu23bKF8">Harry Percival &ndash; Outside-In TDD &ndash; PyCon 2016</a></li>
<li><a href="https://youtu.be/RAxiiRPHS9k">Gary Bernhardt Fast Test Slow Test</a></li>
<li><a href="https://youtu.be/frZrBgWHJdY">Alex Martelli &ndash; Exception and error handling in Python 2 and Python 3 &ndash; PyCon 2016</a></li>
<li><a href="https://youtu.be/E9wS6LdXM8Y">Thomas Ballinger &ndash; Finding closure with closures &ndash; PyCon 2016</a></li>
<li><a href="https://youtu.be/bAcfPzxB3dk">Ned Batchelder &ndash; Machete-mode debugging &ndash; PyCon 2016</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[So Long Keith Emerson]]></title>
    <link href="http://kmggh.github.io/m149daily-blog//blog/2016/03/11/so-long-keith-emerson/"/>
    <updated>2016-03-11T18:33:00-05:00</updated>
    <id>http://kmggh.github.io/m149daily-blog//blog/2016/03/11/so-long-keith-emerson</id>
    <content type="html"><![CDATA[<p>It was in about 1970 when my uncle brought some demo record LPs from a
DJ he knew.  I discovered among them the 1968 electronic Moog album
&ldquo;Switched on Bach.&rdquo;  Another album that I really loved listening to
was &ldquo;The Five Bridges Suite&rdquo; by The Nice.</p>

<p>A couple of years later, in high school, in 1972, my friend Dennis
introduced me to Emerson, Lake and Palmer and their album &ldquo;Trilogy.&rdquo;
At about the same time, my friend BJ  their first album, &ldquo;Emerson, Lake
and Palmer&rdquo; and I was as blown away.</p>

<!-- More -->


<p>Progressive rock was blooming at the time.  The eclectic fusion of
classical, rock, jazz, blues and other music forms in long pieces,
sometimes in multiple movements, were made for long album cuts played
on FM radio The Atlanta station 96 Rock played a lot of progressive
rock in 1973-75.  With motifs of science fiction, fantasy, astronomy
and more, it was a perfect fit especially for the college listening
audience.  Bands like Yes, Pink Floyd, Genesis, and, often considered
by many the leader, Emerson, Lake and Palmer, were setting the pace
for this form of music.</p>

<p>It was years later that I finally realized the ELP line up was really
a traditional trio of keyboards, bass and drums.  Think of Vince
Guaraldi&rsquo;s jazz trio music for &ldquo;A Charlie Brown Christmas.&rdquo;  Often
ELP would transition into traditional jazz in just that format.</p>

<p>My favorite performance, that shows off the extreme range of their
playing, is &ldquo;Take A Pebble&rdquo; from a Belgian TV recording in 1971
(linked below), complete with a Moire projection that would make a
bridge science officer proud.  They were not a tight band, sometimes
lacking the precise virtuosity of a group like Chick Corea&rsquo;s Return To
Forever.  Sometimes it seemed like they didn&rsquo;t really like playing
together that much.  Still, their playing was inventive, talented, and
a joy to listen to.  This performance&rsquo;s rough edges and spontaneity
are part of what puts it at the top of my list.</p>

<p>Their music was ambitious, grand and rose high above the popular music
of the day.  Keith Emerson&rsquo;s stage antics were entertaining when I was
an adolescent but later I didn&rsquo;t care for them or for some the songs&#8217;
themes, but I sure was into the music.  That was what I enjoyed
listening to so much then and I still do today.  He introduced me to
composers like Mussorgsky, Aaron Copeland, and others the same way the
Allman Brothers led me to blues music.</p>

<p>ELP&rsquo;s first five albums stand as their main body of work, at least in
my view, but I liked the records that followed, particularly the
two-volume &ldquo;Works&rdquo; even though it was a mixture of pieces by a band
that was ending and solo pieces by its members.</p>

<p>I don&rsquo;t recall if it was in high school or as a freshman in college
that I made the connection for the first time between ELP and The
Nice&rsquo;s &ldquo;Five Bridges Suite,&rdquo; that album I enjoyed so much.  I went on
to become a fan of the early Nice music and collected several of their
records.  Even then Emerson was mixing Sibelius, Tchaikovsky, and Bach
with Bob Dylan and Coleman Hawkins, and performing live with a full
orchestra.</p>

<p>It&rsquo;s surprisingly hard to say good bye to one of the great artists of
the time.</p>

<h2>Links</h2>

<p>Compare.</p>

<p><a href="https://www.youtube.com/watch?v=CBPbG1a6EP8">ELP &ndash; Take a Pebble &ndash; 1971</a></p>

<p><a href="https://youtu.be/7RSRoM_fc9I">The Nice &ndash; Hang on to a Dream &ndash; 1969</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[LIGO and the GW150914 Discovery]]></title>
    <link href="http://kmggh.github.io/m149daily-blog//blog/2016/02/21/ligo-and-the-discovery/"/>
    <updated>2016-02-21T07:12:00-05:00</updated>
    <id>http://kmggh.github.io/m149daily-blog//blog/2016/02/21/ligo-and-the-discovery</id>
    <content type="html"><![CDATA[<p>I finally found the paper for the recent LIGO discovery of gravity
waves from a black hole merger, event GW150914 at 2015-09-14 09:50:45
+0000 which data implies was the merging of two black holes, one with
mass 36 (+5, -4) solar masses and the other 29 (+4, -4) solar masses
into an object of 62 (+4, -4) solar masses with 3 (+0.5, -0.5) solar
masses radiated away (lost) as emitted gravitational waves.</p>

<!-- More -->


<p>B.P. Abbot and collaborators say,</p>

<blockquote><p>Over 0.2 s, the signal increases in frequency and amplitude in about 8
cycles from 35 to 150 Hz, where the amplitude reaches a maximum. The
most plausible explanation for this evolution is the inspiral of two
orbiting masses, m1 and m2, due to gravitational-wave emission.</p></blockquote>

<p>The source redshift was measured as <em>z</em>=0.09 (+0.03, -0.04).</p>

<p>One interesting outcome in the conclusions is support for massive
black holes.</p>

<blockquote><p>GW150914 demonstrates the existence of stellar-mass black holes more
massive than ≃ 25 solar masses, and establishes that binary black
holes can form in nature and merge within a Hubble time. Binary
black holes have been predicted to form both in isolated binaries
and in dense environments by dynamical interactions.  The
formation of such massive black holes from stellar evolution
requires weak massive-star winds, which are possible in stellar
environments with metallicity lower than ≃ &frac12; the solar value.</p></blockquote>

<p><a href="https://dcc.ligo.org/public/0122/P150914/014/LIGO-P150914_Detection_of_GW150914.pdf">The Paper: Observation of Gravitational Waves from a Binary Black Hole Merger by B. P. Abbott et al. (pdf)</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Tuning Facebook]]></title>
    <link href="http://kmggh.github.io/m149daily-blog//blog/2016/02/06/tuning-facebook/"/>
    <updated>2016-02-06T12:29:00-05:00</updated>
    <id>http://kmggh.github.io/m149daily-blog//blog/2016/02/06/tuning-facebook</id>
    <content type="html"><![CDATA[<p>Okay, I&rsquo;ve decided to try using the dreaded Facebook a little more,
particularly after hearing all of the talk about instant articles in
news and more people using Messenger. I knew about this podcast of
Robert Scoble (who&rsquo;s all in on Facebook) trying to teach Leo Laporte
how to use it back in August but had never gotten around to checking
it out.</p>

<!-- More -->


<p>If you want to learn how to &ldquo;really use&rdquo; Facebook in it&rsquo;s current
form, I recommend watching it and even working through this stuff.</p>

<p>So, starting around about 2016-01-30, I&rsquo;ve been trying most of what
they discuss there over the past few days and I am seeing my FB
experience much improved. There&rsquo;s a lot you can do to fine tune and
control things. I&rsquo;ll see how the news feeds compare to my Twitter
feed, etc.</p>

<p><a href="https://www.youtube.com/watch?v=U53iO3b1K-c">Triangulation 169: Robert Scoble&rsquo;s Facebook Lesson</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Olympus Pen F]]></title>
    <link href="http://kmggh.github.io/m149daily-blog//blog/2016/02/06/olympus-pen-f/"/>
    <updated>2016-02-06T12:17:00-05:00</updated>
    <id>http://kmggh.github.io/m149daily-blog//blog/2016/02/06/olympus-pen-f</id>
    <content type="html"><![CDATA[<p>Wow, the Olympus Pen F retro camera is quite beautiful.</p>

<!-- More -->


<p>Raymond Wong on Mashable says,</p>

<blockquote><p>The new PEN F is quite possibly the most retro mirrorless digital
camera the company has ever created. I dare say it&rsquo;s even more retro
than the company&rsquo;s high-end OM-D mirrorless cameras. It&rsquo;s not just
old-school aesthetics — the camera&rsquo;s got a dial on the front for
quickly switching between different color modes to emulate the look of
film.</p>

<p>The digital PEN F&rsquo;s design pays homage to the original PEN F film
camera released in 1963. The resemblance is obvious when the cameras
are next to each other. You can tell just by looking at it that the
engineers and designers sweated all of the details from the font to
the knurled metal dials.</p></blockquote>

<p>Features from dpreview.</p>

<ul>
<li>20MP Live MOS Four Thirds format sensor</li>
<li>5-axis image stabilization with automatic panning detection</li>
<li>2.36 million dot OLED electronic viewfinder</li>
<li>Up to 10 fps continuous shooting (20 fps with electronic shutter)</li>
<li>Highly customizable interface, twin controls</li>
<li>Fully articulating 1.04 million dot, 3&#8221; LCD touchscreen</li>
<li>50MP High-res Shot mode</li>
<li>1/8000 sec top mechanical shutter speed (1/16,000 with e-shutter)</li>
<li>1080/60p video recording</li>
</ul>


<p><a href="http://mashable.com/2016/01/27/olympus-pen-f/#Vk_Jt5drlkqM">Mashable</a><br />
<a href="http://www.getolympus.com/us/en/pen-f.html">At Olympus</a><br />
<a href="http://www.theverge.com/2016/1/27/10838726/olympus-pen-f-new-digital-version-pricing-availability">The Verge</a><br />
<a href="http://www.dpreview.com/reviews/history-repeating-olympus-pen-f-first-impressions-review">dpreview.com</a><br /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Microcontainers and Alpine Linux]]></title>
    <link href="http://kmggh.github.io/m149daily-blog//blog/2016/02/06/microcontainers-and-alpine-linux/"/>
    <updated>2016-02-06T12:07:00-05:00</updated>
    <id>http://kmggh.github.io/m149daily-blog//blog/2016/02/06/microcontainers-and-alpine-linux</id>
    <content type="html"><![CDATA[<p>This article on using Alpine Linux for Docker microcontainers is
interesting and seems to be a valid way to make containers
significantly more lightweight.</p>

<!-- More -->


<p>I didn&rsquo;t recall much about Alpine Linux so I fired up a Virtual Box
and installed it.  It&rsquo;s definitely small.  It uses BusyBox and libc is
different from the standard.  Python was there and it has a package
manager which works well enough.</p>

<p>It didn&rsquo;t pick up the name servers with DHCP so I kept having to
manually configure resolve.conf.  That&rsquo;s a problem I&rsquo;m sure could be
solved with some research and time.</p>

<p>The most heartbreaking thing is that GNU Emacs doesn&rsquo;t work with that
clib and seems that it&rsquo;s not going to.</p>

<p>In the end I decided it was nice and small, but really if I need to
run Linux in a persistent instance, I much prefer Ubuntu Server.</p>

<p>If I ever do deploy something using Docker, then Alpine is certainly
worth consiering if it supports the app and it&rsquo;s libraries.</p>

<p><a href="http://www.iron.io/blog/2016/01/microcontainers-tiny-portable-containers.html">Microcontainers – Tiny, Portable Docker Containers</a><br />
<a href="http://www.alpinelinux.org">Alpine Linux</a><br/></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Observing Gravitational Waves]]></title>
    <link href="http://kmggh.github.io/m149daily-blog//blog/2016/02/06/observing-gravitational-waves/"/>
    <updated>2016-02-06T12:05:00-05:00</updated>
    <id>http://kmggh.github.io/m149daily-blog//blog/2016/02/06/observing-gravitational-waves</id>
    <content type="html"><![CDATA[<p>The search for detection of gravitational waves continues.</p>

<p><a href="http://arstechnica.com/science/2016/02/after-100-years-scientists-are-finally-closing-in-on-einsteins-ripples/">Ars Technica article</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Rachel Flowers plays Trilogy (and Tarkus)]]></title>
    <link href="http://kmggh.github.io/m149daily-blog//blog/2016/02/06/rachel-flowers-plays-trilogy/"/>
    <updated>2016-02-06T11:51:00-05:00</updated>
    <id>http://kmggh.github.io/m149daily-blog//blog/2016/02/06/rachel-flowers-plays-trilogy</id>
    <content type="html"><![CDATA[<p>If you&rsquo;re a fan of Emerson, Lake and Palmer, checkout Rachel Flowers
playing &ldquo;Fugue&rdquo; and &ldquo;The Endless Enigma (Part 2)&rdquo; starting at the
3m29s mark at NAMM 2016.</p>

<p>She&rsquo;s also famous for her rendition of &ldquo;Tarkus,&rdquo; the entire piece.  Of
course she finally got Keith Emerson&rsquo;s attention and was able to play
it on his Hammond C3 and original Moog.</p>

<p><a href="https://youtu.be/-mzcED3vJ3g">NAMM 2016 Nord Piano 3 Performance with Rachel Flowers</a><br />
<a href="https://www.youtube.com/watch?v=HrXuvkj5Vi0">Rachel Flowers-Tarkus (complete)-solo piano</a><br />
<a href="https://www.youtube.com/watch?v=FLT3Cb96-Mk">Rachel Flowers &ndash; Tarkus with Emerson&rsquo;s Modular Moog</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Ducking Into a Nearby Phone Booth]]></title>
    <link href="http://kmggh.github.io/m149daily-blog//blog/2016/01/23/ducking-into-a-nearby-phone-booth/"/>
    <updated>2016-01-23T14:31:00-05:00</updated>
    <id>http://kmggh.github.io/m149daily-blog//blog/2016/01/23/ducking-into-a-nearby-phone-booth</id>
    <content type="html"><![CDATA[<p>I was recently wondering about the origin of Superman finding a phone
booth to change in.  I found one source on the origin and it was
surprising.</p>

<!-- More -->


<p>Why was I wondering about this in the first place?  It&rsquo;s because I was
thinking about the John Williams soundtrack from the 1978 movie.  I
recalled the scene where Clark Kent stops and glances at the little hood-like
phone booth and keeps going, looking for a place to change.  I
wondered where the changing in a phone booth meme came from since I
didn&rsquo;t recall Superman ever actually changing in a phone booth in any
of the comics or TV shows, etc.</p>

<p>A quick search online pulled up some interesting history including a
post by Steve Younis on supermanhoempage.com called &lsquo;Superman and the
Phone Booth.&#8221;</p>

<blockquote><p>In the Golden Age of comic books Clark Kent didn&rsquo;t use a phone booth
to change into Superman. Actually right throughout every era of
Superman comics the phone booth change has rarely been seen.</p></blockquote>

<p>The first time Superman changes is (spoiler):</p>

<blockquote><p>The answer lies way back in 1941.</p>

<p>To my knowledge, Clark Kent first changed to Superman inside a phone
booth in &ldquo;The Mechanical Monsters&rdquo;, the second of 17 Superman
cartoons produced by Fleischer Studios for Paramount Pictures. It
was released to cinemas on November 28 in 1941.</p></blockquote>

<p>I was pretty much unaware of the Fleischer Studios Superman
animations.  They&rsquo;re very well done and influenced some of the more
recent TV animations in style.</p>

<p>I recommend finding &ldquo;The Mechanical Monsters&rdquo; on Youtube and watching it.</p>

<p><a href="http://www.supermanhomepage.com/other/other.php?topic=phonebooth">Superman and the Phone Booth</a>
<a href="https://en.m.wikipedia.org/wiki/Superman_(1940s_cartoons">Superman 1940s cartoons</a>)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Scaling AWS]]></title>
    <link href="http://kmggh.github.io/m149daily-blog//blog/2016/01/13/scaling-aws/"/>
    <updated>2016-01-13T21:21:00-05:00</updated>
    <id>http://kmggh.github.io/m149daily-blog//blog/2016/01/13/scaling-aws</id>
    <content type="html"><![CDATA[<p>From the web site High Scalability is a nice article on scaling a
service on Amazon Web Services from one to over 11 million users.
It&rsquo;s based on a talk by Joel Williams from AWS.</p>

<!-- More -->


<p>He lists  these main points.</p>

<blockquote><ul>
<li><p>Start with SQL and only move to NoSQL when necessary.</p></li>
<li><p>A consistent theme is take components and separate them out. This
allows those components to scale and fail independently. It applies to
breaking up tiers and creating microservices.</p></li>
<li><p>Only invest in tasks that differentiate you as a business, don&rsquo;t
reinvent the wheel.</p></li>
<li><p>Scalability and redundancy are not two separate concepts, you can
often do both at the same time.</p></li>
<li><p>There&rsquo;s no mention of costs. That would be a good addition to the talk
as that is one of the major criticisms of AWS solutions.</p></li>
</ul>
</blockquote>

<p>The section for just one user is also quite helpful.</p>

<blockquote><ul>
<li><p>Run on a single instance, maybe a type t2.micro. Instance types
comprise varying combinations of CPU, memory, storage, and networking
capacity and give you the flexibility to choose the appropriate mix of
resources for your applications.</p></li>
<li><p>The one instance would run the entire web stack, for example: web app,
database, management, etc.</p></li>
<li><p>Use Amazon Route 53 for the DNS.</p></li>
<li><p>Attach a single Elastic IP address to the instance.</p></li>
</ul>
</blockquote>

<p><a href="http://highscalability.com/blog/2016/1/11/a-beginners-guide-to-scaling-to-11-million-users-on-amazons.html">A Beginner&rsquo;s Guide To Scaling To 11 Million+ Users On Amazon&rsquo;s AWS</a></p>

<p><a href="https://youtu.be/vg5onp8TU6Q">AWS re:Invent 2015 | (ARC301) Scaling Up to Your First 10 Million Users</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Ultimate Amiga Talk]]></title>
    <link href="http://kmggh.github.io/m149daily-blog//blog/2016/01/08/ultimate-amiga-talk/"/>
    <updated>2016-01-08T21:57:00-05:00</updated>
    <id>http://kmggh.github.io/m149daily-blog//blog/2016/01/08/ultimate-amiga-talk</id>
    <content type="html"><![CDATA[<p>As an Amiga 1000 owner (I still have it) this talk was extremely well
done, brought back memories, and is quite accurate.</p>

<p><a href="https://youtu.be/BbVAvDbzXFk">The ultimate Amiga 500 (sic) talk</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Periodic Table Row Seven Complete]]></title>
    <link href="http://kmggh.github.io/m149daily-blog//blog/2016/01/08/periodic-table-row-seven-complete/"/>
    <updated>2016-01-08T21:52:00-05:00</updated>
    <id>http://kmggh.github.io/m149daily-blog//blog/2016/01/08/periodic-table-row-seven-complete</id>
    <content type="html"><![CDATA[<blockquote><p>Confirmation that four new elements – those with atomic numbers 113,
115, 117 and 118 – have indeed been synthesised has come from the
International Union of Pure and Applied Chemistry (Iupac), completing
the seventh row of the periodic table.</p></blockquote>

<!-- More -->


<blockquote><p>The groups credited for creating them – in Japan, Russia and the US –
have spent several years gathering enough evidence to convince experts
from Iupac and its physics equivalent, the International Union of Pure
and Applied Physics, of the elements’ existence. All four are highly
unstable superheavy metals that exist for only a fraction of a
second. They are made by bombarding heavy metal targets with beams of
ions, and can usually only be detected by measuring the radiation and
other nuclides produced as they decay.</p></blockquote>

<p><a href="http://www.rsc.org/chemistryworld/2016/01/new-elements-periodic-table-seventh-row-iupac">Confirmation of four new elements completes seventh row of periodic table</a> from the Royal Society of Chemistry by Emma Stoye.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Block Chain for Authentication]]></title>
    <link href="http://kmggh.github.io/m149daily-blog//blog/2016/01/08/block-chain-for-authentication/"/>
    <updated>2016-01-08T21:39:00-05:00</updated>
    <id>http://kmggh.github.io/m149daily-blog//blog/2016/01/08/block-chain-for-authentication</id>
    <content type="html"><![CDATA[<p>The latest rage is all about the block chain, made popular by Bitcoin.
It&rsquo;s not exactly authentication but more publication of data in a
sense that it becomes part of a sequential public record.  From that
point on, it can be looked up and verified.</p>

<!-- More -->


<p>The clever part is that the public record isn&rsquo;t posted in a particular
place or location but is distributed all over, approximately to
everyone who cares.  Since everyone has a copy, they can be verified
against each other.</p>

<p>As pointed out in the article below, it&rsquo;s like publishing a snippet
about a transaction in a newspaper which is then sent out to all
subscribers.  In this case, though, the newspaper contains all of the
transactions ever published there and just keeps adding to them.  You
can see one of the first problems right there.  This growing &ldquo;ledger&rdquo;
just keeps, well, growing.  It doesn&rsquo;t seem to scale well as they say.</p>

<p><a href="http://www.wired.co.uk/news/archive/2016-01/05/blockchain-is-the-new-signature">How the blockchain will enable self-service government</a> by Brian Forde and Michael Casey of Wired UK.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Atomic Energy Toys from the 50s]]></title>
    <link href="http://kmggh.github.io/m149daily-blog//blog/2016/01/08/atomic-energy-toys-from-the-50s/"/>
    <updated>2016-01-08T21:30:00-05:00</updated>
    <id>http://kmggh.github.io/m149daily-blog//blog/2016/01/08/atomic-energy-toys-from-the-50s</id>
    <content type="html"><![CDATA[<p><a href="http://www.orau.org/PTP/collection/atomictoys/GilbertU238Lab.htm">Gilbert U-238 Atomic Energy Lab (1950-1951)</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Raspberry Pi Much Faster Than SPARCstation 20]]></title>
    <link href="http://kmggh.github.io/m149daily-blog//blog/2016/01/08/raspberry-pi-muct-faster-than-sparcstation-20/"/>
    <updated>2016-01-08T21:27:00-05:00</updated>
    <id>http://kmggh.github.io/m149daily-blog//blog/2016/01/08/raspberry-pi-muct-faster-than-sparcstation-20</id>
    <content type="html"><![CDATA[<blockquote><p>A couple weeks back, I tweeted the following:</p>

<p>&ldquo;Turns out a Raspberry Pi now is about 6× as fast as a SPARCstation 20
was 20 years ago. And a Pi 2 is more like 15× as fast.&rdquo;</p>

<p>I was a little low in my numbers, too&mdash;they’re more like 7× and 16×
to 41× as fast&mdash;since I was going from memory!</p>

<p>Here’s how I came up with that.</p></blockquote>

<p><a href="http://eschatologist.net/blog/?p=266">Raspberry Pi vs SPARCstation 20: Fight!</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[AWS Mistakes You Should Avoid]]></title>
    <link href="http://kmggh.github.io/m149daily-blog//blog/2016/01/08/aws-mistakes-you-should-avoid/"/>
    <updated>2016-01-08T21:22:00-05:00</updated>
    <id>http://kmggh.github.io/m149daily-blog//blog/2016/01/08/aws-mistakes-you-should-avoid</id>
    <content type="html"><![CDATA[<p>Michael Wittig writes on cloudonaut.io,</p>

<blockquote><p>As an AWS Cloud Consultant I see many AWS accounts. During the year I
collected mistakes that I saw in each account and aggregated them to
provide you my best of. It turned out that the 5 most common mistakes
on AWS are:</p>

<ul>
<li>managing infrastructure manually</li>
<li>not using Auto Scaling Groups</li>
<li>not analyzing metrics in CloudWatch</li>
<li>ignoring Trusted Advisor</li>
<li>underutilizing virtual machines</li>
</ul>
</blockquote>

<p><a href="https://cloudonaut.io/5-aws-mistakes-you-should-avoid/">5 AWS Mistakes You Should Avoid</a></p>
]]></content>
  </entry>
  
</feed>
