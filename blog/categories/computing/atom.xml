<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: computing | Monolith149 Daily]]></title>
  <link href="http://kmggh.github.io/m149daily-blog//blog/categories/computing/atom.xml" rel="self"/>
  <link href="http://kmggh.github.io/m149daily-blog//"/>
  <updated>2016-10-04T01:21:45-04:00</updated>
  <id>http://kmggh.github.io/m149daily-blog//</id>
  <author>
    <name><![CDATA[Ken Guyton]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[The C Programming Language]]></title>
    <link href="http://kmggh.github.io/m149daily-blog//blog/2016/10/04/the-c-programming-language/"/>
    <updated>2016-10-04T01:15:00-04:00</updated>
    <id>http://kmggh.github.io/m149daily-blog//blog/2016/10/04/the-c-programming-language</id>
    <content type="html"><![CDATA[<p>The classic &ldquo;The C Programming Language&rdquo; by Kernighan and Ritchie is
online in full at the below link.  This is the second edition from
1988.</p>

<p><a href="https://hassanolity.files.wordpress.com/2013/11/the_c_programming_language_2.pdf">The C Programming Language</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Appropriate Uses for SQLite]]></title>
    <link href="http://kmggh.github.io/m149daily-blog//blog/2016/09/26/appropriate-uses-for-sqlite/"/>
    <updated>2016-09-26T06:41:00-04:00</updated>
    <id>http://kmggh.github.io/m149daily-blog//blog/2016/09/26/appropriate-uses-for-sqlite</id>
    <content type="html"><![CDATA[<p>From sqlite.org, <a href="https://sqlite.org/whentouse.html">Appropriate Uses For SQLite</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Microsoft FPGAs]]></title>
    <link href="http://kmggh.github.io/m149daily-blog//blog/2016/09/26/microsoft-fpgas/"/>
    <updated>2016-09-26T06:34:00-04:00</updated>
    <id>http://kmggh.github.io/m149daily-blog//blog/2016/09/26/microsoft-fpgas</id>
    <content type="html"><![CDATA[<p><a href="https://www.wired.com/2016/09/microsoft-bets-future-chip-reprogram-fly/?mbid=social_fb">Microsoftâ€™s Internet Business Gets a New Kind of Processor | WIRED</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Triumph of the Nerds]]></title>
    <link href="http://kmggh.github.io/m149daily-blog//blog/2016/09/24/triumph-of-the-nerds/"/>
    <updated>2016-09-24T14:42:00-04:00</updated>
    <id>http://kmggh.github.io/m149daily-blog//blog/2016/09/24/triumph-of-the-nerds</id>
    <content type="html"><![CDATA[<p>One of the best documentaries on the history of micro computing,
covering 1975 to 1995, is Robert X. Cringley&rsquo;s &ldquo;Triumph of the Nerds.&rdquo;
It&rsquo;s currently on YouTube.</p>

<p><a href="https://youtu.be/sX5g0kidk3Y">Part 1</a><br />
<a href="https://youtu.be/EiffgiRAYUI">Part 2</a><br />
<a href="https://youtu.be/ZFUsYXZSMqs">Part 3</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Scaling AWS]]></title>
    <link href="http://kmggh.github.io/m149daily-blog//blog/2016/01/13/scaling-aws/"/>
    <updated>2016-01-13T21:21:00-05:00</updated>
    <id>http://kmggh.github.io/m149daily-blog//blog/2016/01/13/scaling-aws</id>
    <content type="html"><![CDATA[<p>From the web site High Scalability is a nice article on scaling a
service on Amazon Web Services from one to over 11 million users.
It&rsquo;s based on a talk by Joel Williams from AWS.</p>

<!-- More -->


<p>He lists  these main points.</p>

<blockquote><ul>
<li><p>Start with SQL and only move to NoSQL when necessary.</p></li>
<li><p>A consistent theme is take components and separate them out. This
allows those components to scale and fail independently. It applies to
breaking up tiers and creating microservices.</p></li>
<li><p>Only invest in tasks that differentiate you as a business, don&rsquo;t
reinvent the wheel.</p></li>
<li><p>Scalability and redundancy are not two separate concepts, you can
often do both at the same time.</p></li>
<li><p>There&rsquo;s no mention of costs. That would be a good addition to the talk
as that is one of the major criticisms of AWS solutions.</p></li>
</ul>
</blockquote>

<p>The section for just one user is also quite helpful.</p>

<blockquote><ul>
<li><p>Run on a single instance, maybe a type t2.micro. Instance types
comprise varying combinations of CPU, memory, storage, and networking
capacity and give you the flexibility to choose the appropriate mix of
resources for your applications.</p></li>
<li><p>The one instance would run the entire web stack, for example: web app,
database, management, etc.</p></li>
<li><p>Use Amazon Route 53 for the DNS.</p></li>
<li><p>Attach a single Elastic IP address to the instance.</p></li>
</ul>
</blockquote>

<p><a href="http://highscalability.com/blog/2016/1/11/a-beginners-guide-to-scaling-to-11-million-users-on-amazons.html">A Beginner&rsquo;s Guide To Scaling To 11 Million+ Users On Amazon&rsquo;s AWS</a></p>

<p><a href="https://youtu.be/vg5onp8TU6Q">AWS re:Invent 2015 | (ARC301) Scaling Up to Your First 10 Million Users</a></p>
]]></content>
  </entry>
  
</feed>
