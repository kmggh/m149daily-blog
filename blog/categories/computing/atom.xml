<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: computing | Monolith149 Daily]]></title>
  <link href="http://kmggh.github.io/m149daily-blog//blog/categories/computing/atom.xml" rel="self"/>
  <link href="http://kmggh.github.io/m149daily-blog//"/>
  <updated>2015-10-02T02:47:08-04:00</updated>
  <id>http://kmggh.github.io/m149daily-blog//</id>
  <author>
    <name><![CDATA[Ken Guyton]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Docker Without Docker]]></title>
    <link href="http://kmggh.github.io/m149daily-blog//blog/2015/04/26/docker-without-docker/"/>
    <updated>2015-04-26T14:08:00-04:00</updated>
    <id>http://kmggh.github.io/m149daily-blog//blog/2015/04/26/docker-without-docker</id>
    <content type="html"><![CDATA[<blockquote><ul>
<li><p>The systemd-nspawn command runs a command or OS in a lightweight
namespace container</p></li>
<li><p>&ldquo;In many ways it is similar to chroot(1), but more powerful since it
fully virtualizes the file system hierarchy, as well as the process
tree, the various IPC subsystems and the host and domain name.&rdquo;</p></li>
</ul>
</blockquote>

<p>Trying it out (from the article):</p>

<pre><code>systemd-nspawn -D debian-tree/ /bin/echo "hello, outside world!"
$ systemd-nspawn -D debian-tree/ /bin/bash 
$ systemd-nspawn -D debian-tree/ /sbin/init
</code></pre>

<blockquote><p>Some cool things you can do with systemd-nspawn:</p>

<p>&ldquo;Execute this command on my root filesystem, but roll back any changes
at the end&rdquo;</p>

<p>&ldquo;Run nginx inside its own container on boot, but limit it to 512 MB of
RAM and 200% CPU&rdquo;</p>

<p>&ldquo;Give me a container that has its own private network and its own IP
and MAC addresses, but map certain ports on the host to the container&rdquo;</p>

<p>&ldquo;Run this container with its own daemons in it, and monitor them to
make sure they don&rsquo;t fail&rdquo;</p>

<p>&ldquo;Download this container from the Docker Hub and run it every time I
boot, but without installing Docker&rdquo;</p></blockquote>

<p><a href="https://chimeracoder.github.io/docker-without-docker/#1">Docker Without Docker</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Bazaar]]></title>
    <link href="http://kmggh.github.io/m149daily-blog//blog/2015/01/14/bazaar/"/>
    <updated>2015-01-14T07:33:00-05:00</updated>
    <id>http://kmggh.github.io/m149daily-blog//blog/2015/01/14/bazaar</id>
    <content type="html"><![CDATA[<p>From looking at my development directories, it appears that it was in
early 2008 that I moved my personal source code control system from
CVS to Bazaar.  (Before that I&rsquo;d used RCS and even SCCS) I learned
about Bazaar from a coworker, John.  It was Python-based, the system
used by Canonical for Ubuntu and I found it to work extremely well.
Since then, for seven years now, I&rsquo;ve used it for my personal version
management and also as a shadow version control system at work.</p>

<p>It has been extremely stable for me, fast, and I can&rsquo;t think of any
trouble I&rsquo;ve ever had with Bazaar.  However, lately I&rsquo;ve seen
indications that Bazaar is no longer maintained and may be declining
as a version control choice.  Maybe it was never that popular.</p>

<p>Lately, Git seems to be the version control system of choice and it is
the system I use every day for work.  I&rsquo;m wondering if I should start
using it for my personal work.  The command set and, as they say, &ldquo;the
workflow&rdquo; is different.  It&rsquo;s not friendly to large binary blobs.
That&rsquo;s probably okay.</p>

<p>I already like it less because, if I want to make a branch of a
particular version or another branch to work on, there needs to be a
root branch of sorts, a hub to clone the other branch from.  With
Bazaar you can just branch any branch, merge changes from it, etc.  So
now I&rsquo;ll have to make some local hub to clone, push and pull from.
Yech.  That seems so archaic now.</p>

<p>However, I found this blog post by Jelmer Vernooij who was a primary
developer of Bazaar.  He basically tells the complete history and also
how it&rsquo;s finally been abandoned for the most part.  So, I guess I
should start moving on to git.</p>

<p>I won&rsquo;t even try to convert over my current bzr projects.  There is
Mercurial which may be worth a look.  Ah well.</p>

<blockquote><p>Contributions from people outside of the Canonical Bazaar team had
become rare by mid-2011. In early 2012 the members of the Canonical
Bazaar team were assigned to other projects, though we would still fix
the occasional bug in Bazaar. Martin left Canonical in April 2012.</p>

<p>During my spare time in the first 6 months of 2012 I tried to finish
my remaining in-progress branches. After that, I thought I would see
how it would go.</p>

<p>I think it&rsquo;s time to move on. There are still some things I don&rsquo;t like
about it, but Git is a decent source code management system. Bazaar
isn&rsquo;t going anywhere; no doubt there will be users for a few years to
come, and people contributing fixes, but it hasn&rsquo;t been adopted to the
level I was hoping.</p></blockquote>

<p><a href="https://www.stationary-traveller.eu/pages/bzr-a-retrospective.html">Bazaar-NG: 7 years of hacking on a distributed version control system</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How Intel Gave Stephen Hawking a Voice]]></title>
    <link href="http://kmggh.github.io/m149daily-blog//blog/2015/01/14/how-intel-gave-stephen-hawking-a-voice/"/>
    <updated>2015-01-14T07:28:00-05:00</updated>
    <id>http://kmggh.github.io/m149daily-blog//blog/2015/01/14/how-intel-gave-stephen-hawking-a-voice</id>
    <content type="html"><![CDATA[<p>From Wired by Joao Medeiros.</p>

<blockquote><p>Hawking is very attached to his voice: in 1988, when Speech Plus gave
him the new synthesizer, the voice was different so he asked them to
replace it with the original. His voice had been created in the early
&lsquo;80s by MIT engineer Dennis Klatt, a pioneer of text-to-speech
algorithms. He invented the DECtalk, one of the first devices to
translate text into speech. He initially made three voices, from
recordings of his wife, daughter and himself. The female’s voice was
called &ldquo;Beautiful Betty&rdquo;, the child’s &ldquo;Kit the Kid&rdquo;, and the male
voice, based on his own, &ldquo;Perfect Paul.&rdquo; &ldquo;Perfect Paul&rdquo; is Hawking&rsquo;s
voice.</p></blockquote>

<p><a href="http://www.wired.com/2015/01/intel-gave-stephen-hawking-voice/">How Intel Gave Stephen Hawking a Voice</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[More KF]]></title>
    <link href="http://kmggh.github.io/m149daily-blog//blog/2013/08/17/more-kf/"/>
    <updated>2013-08-17T04:57:00-04:00</updated>
    <id>http://kmggh.github.io/m149daily-blog//blog/2013/08/17/more-kf</id>
    <content type="html"><![CDATA[<p>A less-awkward usage occurred to me yesterday for the KF notation.
Instead of referring to four gigbytes (4 GB) as &ldquo;4 3-KF&rdquo; use &ldquo;4 KF3&rdquo;.
So the scheme becomes KB = KF1, MG = KF2, GB = KF3, TB = KF4, PB = KF5,
and so on.</p>

<p>Early microcomputers had a maximum memory of 64 KF1.  The early IBM PC
architecture had 640 KF1 of useable memory when there was 1 KF2 of
RAM.</p>

<p>It hasn&rsquo;t been that long ago that 512 KF2 or even 640 KF2 were common
in modern PCs.  Today several KF3 are common and 10 or 20 KF3 in big
servers.</p>

<p>Now it&rsquo;s not uncommon for a home user to have one or several KF4 of
disk space.</p>

<p>Corporate data stores can easily span several KF5 and get into the
KF6.  Reports of data resources in the KF7 realm are starting to surface..</p>

<p>Original post: <a href="/blog/2013/07/13/kf-notation-for-big-numbers/">KF Notation for Big
Numbers</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[KF Notation for Big Numbers]]></title>
    <link href="http://kmggh.github.io/m149daily-blog//blog/2013/07/13/kf-notation-for-big-numbers/"/>
    <updated>2013-07-13T12:28:00-04:00</updated>
    <id>http://kmggh.github.io/m149daily-blog//blog/2013/07/13/kf-notation-for-big-numbers</id>
    <content type="html"><![CDATA[<p>As storage grows exponentially, it&rsquo;s getting harder to keep up with
the specification of data capacity and other big numbers.  Even with
kilobytes (KB), megabytes (MB), terabytes (TB), etc., by the time we
get to petabytes (PB), exabytes (EB), zettabytes (ZB), and yottabytes
(YB), we&rsquo;ve long lost any sense of relative size.</p>

<p>I&rsquo;m proposing a notation called K-Factor (KF), which is a size
converted to base-1024, i.e., it represents how
many factors of 1024, factors of K, are multiplied together.  The
K-Factor of a value is just the integer part of it&rsquo;s log-base-1024
value.  It&rsquo;s easier than it sounds.</p>

<p><img class="center" src="/postimages/kf_table.png" title="" ></p>

<p>With such a notation in hand, we can cruise on beyond to 9 KF, 10 KF,
etc.</p>

<p>Using KF, you might specify a 2-TB disk as a  2-4KF disk and 4 GB of
RAM as 4 3KF.  Storage space of 16 petabytes would be 16 5KF.</p>

<p>As usual, one would have to recall that a <em>difference</em> between two
sizes of 1 KF would mean a factor of 1024 larger, a difference of 2 KF
would be roughly a factor of a million (1024<sup>2</sup>), 3 KF approximately a
billion, etc.</p>

<p>I have yet to find a similar scheme in the searching I&rsquo;ve done so far.</p>
]]></content>
  </entry>
  
</feed>
