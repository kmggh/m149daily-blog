<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: linux | Monolith149 Daily]]></title>
  <link href="http://kmggh.github.io/m149daily-blog//blog/categories/linux/atom.xml" rel="self"/>
  <link href="http://kmggh.github.io/m149daily-blog//"/>
  <updated>2016-02-06T12:34:54-05:00</updated>
  <id>http://kmggh.github.io/m149daily-blog//</id>
  <author>
    <name><![CDATA[Ken Guyton]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Microcontainers and Alpine Linux]]></title>
    <link href="http://kmggh.github.io/m149daily-blog//blog/2016/02/06/microcontainers-and-alpine-linux/"/>
    <updated>2016-02-06T12:07:00-05:00</updated>
    <id>http://kmggh.github.io/m149daily-blog//blog/2016/02/06/microcontainers-and-alpine-linux</id>
    <content type="html"><![CDATA[<p>This article on using Alpine Linux for Docker microcontainers is
interesting and seems to be a valid way to make containers
significantly more lightweight.</p>

<!-- More -->


<p>I didn&rsquo;t recall much about Alpine Linux so I fired up a Virtual Box
and installed it.  It&rsquo;s definitely small.  It uses BusyBox and libc is
different from the standard.  Python was there and it has a package
manager which works well enough.</p>

<p>It didn&rsquo;t pick up the name servers with DHCP so I kept having to
manually configure resolve.conf.  That&rsquo;s a problem I&rsquo;m sure could be
solved with some research and time.</p>

<p>The most heartbreaking thing is that GNU Emacs doesn&rsquo;t work with that
clib and seems that it&rsquo;s not going to.</p>

<p>In the end I decided it was nice and small, but really if I need to
run Linux in a persistent instance, I much prefer Ubuntu Server.</p>

<p>If I ever do deploy something using Docker, then Alpine is certainly
worth consiering if it supports the app and it&rsquo;s libraries.</p>

<p><a href="http://www.iron.io/blog/2016/01/microcontainers-tiny-portable-containers.html">Microcontainers – Tiny, Portable Docker Containers</a><br />
<a href="http://www.alpinelinux.org">Alpine Linux</a><br/></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[NixOS Linux]]></title>
    <link href="http://kmggh.github.io/m149daily-blog//blog/2015/01/14/nixos-linux/"/>
    <updated>2015-01-14T08:04:00-05:00</updated>
    <id>http://kmggh.github.io/m149daily-blog//blog/2015/01/14/nixos-linux</id>
    <content type="html"><![CDATA[<p>I don&rsquo;t recall hearing of NixOS Linux until a tweet crossed my Twitter
feed about a new release during the week between Christmas and New
Year&rsquo;s.  I looked it up and was fascinating by the new ideas and
approaches there.  Here&rsquo;s my awkward summar.</p>

<ul>
<li>Packages are immutable, like values in a functional language. Making configuration changes involves generating a new package.</li>
<li>Each package instance, each version, is stored on the system in it&rsquo;s
own directory.  Files aren&rsquo;t installed all over the place in /usr/local/lib, /usr/lib, /usr/local/bin, etc.</li>
<li>Due to the above, aliases are much more important than search paths.</li>
<li>Also, the dependency tree for a package is very straightforward.</li>
<li>System configuration is via a functional language and is a single expression in one file.</li>
<li>So you can easily boot and run any configuration, back out changes, etc.</li>
</ul>


<p>I installed it on a Virtual box VM and played with it briefly.  One of
the first negative things I noticed was a ps listing.  Since each
package instance is under a single nixos directory with a directory
named by a long random hash, and since every running process is in a
bin directory (or some such) in one of those, the path to any running
program is a bear.</p>

<p>I pulled down nginx.  That was easy.  But then I went to configure it
and that&rsquo;s where I came face to face with NixOS' trade off.  You don&rsquo;t
change files in a package.  As I understand it so far, you add code
into the single configuration file that essentially edits, in this
case, the nginx config file in a sort of sed-like way, and produces a
new package instance that is used.  So a nice and simple config file
from nginx was turned into a functional language expression that now
requires me to go learn that language.</p>

<p>I stopped at that point but I&rsquo;m still fascinated by the distribution
and the ideas there.  There are some nice hard lines and properties of
cleanliness here.  Once the investment is made in learning the Nix
config language, it may be straightforward to move on and maintain
systems.  For a simple server instance this may be something to try.</p>

<p>So, I&rsquo;ll move on with it soon and see how it goes.</p>

<p><a href="http://nixos.org/">Nixos.org</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Ten Years of Ubuntu]]></title>
    <link href="http://kmggh.github.io/m149daily-blog//blog/2014/10/23/ten-years-of-ubuntu/"/>
    <updated>2014-10-23T06:08:00-04:00</updated>
    <id>http://kmggh.github.io/m149daily-blog//blog/2014/10/23/ten-years-of-ubuntu</id>
    <content type="html"><![CDATA[<p><a href="/blog/2014/10/11/blogging-for-30-days/">Day 13.1</a></p>

<p><a href="http://arstechnica.com/information-technology/2014/10/ten-years-of-ubuntu-how-linuxs-beloved-newcomer-became-its-criticized-king/">Ten years of Ubuntu: How Linux’s beloved newcomer became its criticized king</a>.  Ars looks back at the decade in Ubuntu, from Warty Warthog to 25 million users worldwide, by Scott Gilbertson at Ars Technica.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Systemd]]></title>
    <link href="http://kmggh.github.io/m149daily-blog//blog/2014/10/19/systemd/"/>
    <updated>2014-10-19T06:35:00-04:00</updated>
    <id>http://kmggh.github.io/m149daily-blog//blog/2014/10/19/systemd</id>
    <content type="html"><![CDATA[<p><a href="/blog/2014/10/11/blogging-for-30-days/">Day 9.1</a></p>

<p>There seems to be quite a controversy brewing over systemd.  I was
reading the debianfork.org site this morning and also the Wikipedia
page.  It seems to be a case of the old UNIX-way vs. a new,
re-engineered way of the functionality of the <em>init(8)</em>
process/program and how system booting and startup are managed.</p>

<p>I haven&rsquo;t dug into this enough yet to understand all of the details of
the arguments.  The Wikipedia page makes it look like people with
names I know were, at least initially, agin it.</p>

<p>I currently favor the Linux 12.04 Server edition and I&rsquo;ll probably be
looking to upgrade to 16.04 at some point.  Will I be looking at some
alternative, new fork of Linux by then?  Or will I even be looking at
Linux at all?  That&rsquo;s a good question.  I may have two or three Mac
Minis by then and that will be it.  It could happen.  System
administration eventually gets old.</p>

<p>Mark Shuttleworth, the chief of Ubuntu, stamped the Debian decision on
2014-02-14 to go forward with Systemd.  I&rsquo;m not encouraged that his
post title begins with the word &ldquo;losing.&rdquo;</p>

<p><a href="http://en.wikipedia.org/wiki/Systemd">Systemd on Wikipedia</a><br />
<a href="http://debianfork.org">debianfork.org</a><br />
<a href="http://www.markshuttleworth.com/archives/1316">&ldquo;Losing graciously&rdquo; by Mark Shuttleworth</a><br />
<a href="http://www.zdnet.com/linus-torvalds-and-others-on-linuxs-systemd-7000033847/">&ldquo;Linus Torvalds and others on Linux&rsquo;s systemd&rdquo; by By Steven
J. Vaughan-Nichols on ZD Net</a><br />
<a href="http://lwn.net/Articles/572805/">&ldquo;Which init system for Debian?&rdquo; by Jonathan Corbet on lwn.net, 2014-11-05</a><br /></p>
]]></content>
  </entry>
  
</feed>
