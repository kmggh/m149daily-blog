<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: os | Monolith149 Daily]]></title>
  <link href="http://kmggh.github.io/m149daily-blog//blog/categories/os/atom.xml" rel="self"/>
  <link href="http://kmggh.github.io/m149daily-blog//"/>
  <updated>2017-04-01T06:07:54-04:00</updated>
  <id>http://kmggh.github.io/m149daily-blog//</id>
  <author>
    <name><![CDATA[Ken Guyton]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[USENIX Computing Systems]]></title>
    <link href="http://kmggh.github.io/m149daily-blog//blog/2016/12/20/usenix-computing-systems/"/>
    <updated>2016-12-20T15:02:00-05:00</updated>
    <id>http://kmggh.github.io/m149daily-blog//blog/2016/12/20/usenix-computing-systems</id>
    <content type="html"><![CDATA[<p>For many years I received the USENIX &ldquo;Computing Systems&rdquo; journal and
recently, when doing I search, I discovered the entire archive is
on-line.</p>

<p><a href="https://www.usenix.org/publications/compsystems/computing-systems">Computing Systems</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Upgrade to Mac OS X 10.11]]></title>
    <link href="http://kmggh.github.io/m149daily-blog//blog/2015/11/17/upgrade-to-mac-os-x-10-dot-11/"/>
    <updated>2015-11-17T08:55:00-05:00</updated>
    <id>http://kmggh.github.io/m149daily-blog//blog/2015/11/17/upgrade-to-mac-os-x-10-dot-11</id>
    <content type="html"><![CDATA[<p>I&rsquo;ve finally upgraded to Mac OS X 10.11 at home.  There&rsquo;s really not
much to say so far.  The only new/changed feature I really see and use
is Mission Control.  Ohter than that it&rsquo;s pretty much business as
usual.</p>

<p>The process went quite smoothly.  I started the download and left it
unattended.  Then I returned later and started the install and left it
running unattended.  Note that I usually never leave an upgrade
running but they did take a few minutes and I had other things to do
including even being out of the house for a while.</p>

<p>When I came back and the new login screen was presented I logged in
with no trouble and only had to enter the Apple id for iCloud.</p>

<p>There may be features I&rsquo;m using that are new or changed and I haven&rsquo;t
used them enough in the past so I&rsquo;m unaware of the differences.</p>

<p>I hear that Notes has become quite good but I&rsquo;m sticking with Evernote
and Drafts on my phone.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[KeyKOS The Nanokernel]]></title>
    <link href="http://kmggh.github.io/m149daily-blog//blog/2015/11/14/keykos-the-nanokernel/"/>
    <updated>2015-11-14T21:44:00-05:00</updated>
    <id>http://kmggh.github.io/m149daily-blog//blog/2015/11/14/keykos-the-nanokernel</id>
    <content type="html"><![CDATA[<p>I don&rsquo;t recall ever having heard of this operating system.  The ideas
sound quite interesting and nice.  There&rsquo;s a lot I have imagined in
here.</p>

<p>From the abstract:</p>

<blockquote><p>The KeyKOS nanokernel is a capability-based object-oriented operating
system that has been in production use since 1983. Its original
implementation was motivated by the need to provide security,
reliability, and 24-hour availability for applications on the Tymnet®
hosts. Requirements included the ability to run multiple
instantiations of several operating systems on a single hardware
system. KeyKOS was implemented on the System/370, and has since been
ported to the 680x0 and 88x00 processor families. Implementations of
EDX, RPS, VM, MVS, and UNIX® have been constructed. The nanokernel is
approximately 20,000 lines of C code, including capability,
checkpoint, and virtual memory support. The nanokernel itself can run
in less than 100 Kilobytes of memory.</p>

<p>KeyKOS is characterized by a small set of powerful and highly
optimized primitives that allow it to achieve performance competitive
with the macrokernel operating systems that it replaces. Objects are
exclusively invoked through protected capabilities, supporting high
levels of security and intervals between failures in excess of one
year. Messages between agents may contain both capabilities and
data. Checkpoints at tunable intervals provide system-wide backup,
fail-over support, and system restart times typically less than 30
seconds. In addition, a journaling mechanism provides support for
high-performance transaction processing. On restart, all processes are
restored to their exact state at the time of checkpoint, including
registers and virtual memory.</p></blockquote>

<p><a href="http://www.cis.upenn.edu/~KeyKOS/NanoKernel/NanoKernel.html">The KeyKOS Nanokernel Architecture</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Chrome OS and Android Merge]]></title>
    <link href="http://kmggh.github.io/m149daily-blog//blog/2015/11/05/chrome-os-and-android-merge/"/>
    <updated>2015-11-05T06:31:00-05:00</updated>
    <id>http://kmggh.github.io/m149daily-blog//blog/2015/11/05/chrome-os-and-android-merge</id>
    <content type="html"><![CDATA[<p>I think John Gruber of Daring Fireball said it best.  &ldquo;I think this
was inevitable. Android can (and does) run Chrome. Chrome can’t run
Android. And the browser-based web is decreasing in importance.&rdquo;</p>

<p><a href="http://daringfireball.net/linked/2015/11/02/chromeos-to-fold">WSJ: &ldquo;Google to Fold Chrome Operating System Into Android&rdquo;</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[NixOS Linux]]></title>
    <link href="http://kmggh.github.io/m149daily-blog//blog/2015/01/14/nixos-linux/"/>
    <updated>2015-01-14T08:04:00-05:00</updated>
    <id>http://kmggh.github.io/m149daily-blog//blog/2015/01/14/nixos-linux</id>
    <content type="html"><![CDATA[<p>I don&rsquo;t recall hearing of NixOS Linux until a tweet crossed my Twitter
feed about a new release during the week between Christmas and New
Year&rsquo;s.  I looked it up and was fascinating by the new ideas and
approaches there.  Here&rsquo;s my awkward summar.</p>

<ul>
<li>Packages are immutable, like values in a functional language. Making configuration changes involves generating a new package.</li>
<li>Each package instance, each version, is stored on the system in it&rsquo;s
own directory.  Files aren&rsquo;t installed all over the place in /usr/local/lib, /usr/lib, /usr/local/bin, etc.</li>
<li>Due to the above, aliases are much more important than search paths.</li>
<li>Also, the dependency tree for a package is very straightforward.</li>
<li>System configuration is via a functional language and is a single expression in one file.</li>
<li>So you can easily boot and run any configuration, back out changes, etc.</li>
</ul>


<p>I installed it on a Virtual box VM and played with it briefly.  One of
the first negative things I noticed was a ps listing.  Since each
package instance is under a single nixos directory with a directory
named by a long random hash, and since every running process is in a
bin directory (or some such) in one of those, the path to any running
program is a bear.</p>

<p>I pulled down nginx.  That was easy.  But then I went to configure it
and that&rsquo;s where I came face to face with NixOS' trade off.  You don&rsquo;t
change files in a package.  As I understand it so far, you add code
into the single configuration file that essentially edits, in this
case, the nginx config file in a sort of sed-like way, and produces a
new package instance that is used.  So a nice and simple config file
from nginx was turned into a functional language expression that now
requires me to go learn that language.</p>

<p>I stopped at that point but I&rsquo;m still fascinated by the distribution
and the ideas there.  There are some nice hard lines and properties of
cleanliness here.  Once the investment is made in learning the Nix
config language, it may be straightforward to move on and maintain
systems.  For a simple server instance this may be something to try.</p>

<p>So, I&rsquo;ll move on with it soon and see how it goes.</p>

<p><a href="http://nixos.org/">Nixos.org</a></p>
]]></content>
  </entry>
  
</feed>
