<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: programming | Monolith149 Daily]]></title>
  <link href="http://kmggh.github.io/m149daily-blog//blog/categories/programming/atom.xml" rel="self"/>
  <link href="http://kmggh.github.io/m149daily-blog//"/>
  <updated>2016-09-23T19:16:32-04:00</updated>
  <id>http://kmggh.github.io/m149daily-blog//</id>
  <author>
    <name><![CDATA[Ken Guyton]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Python Videos]]></title>
    <link href="http://kmggh.github.io/m149daily-blog//blog/2016/09/20/python-videos/"/>
    <updated>2016-09-20T23:42:00-04:00</updated>
    <id>http://kmggh.github.io/m149daily-blog//blog/2016/09/20/python-videos</id>
    <content type="html"><![CDATA[<p>Lately I&rsquo;ve been watching some of the videos from Pycon and have found
these to be quite excellent.</p>

<!-- More -->


<ul>
<li><a href="https://youtu.be/G-uKNd5TSBw">Keynote &ndash; Guido van Rossum &ndash; PyCon 2015</a></li>
<li><a href="https://youtu.be/YgtL4S7Hrwo">Guido van Rossum &ndash; Python Language &ndash; PyCon 2016</a></li>
<li><a href="https://youtu.be/KPzDX5TX5HE">Brett Cannon &ndash; How to make your code Python 2/3 compatible &ndash; PyCon 2015</a></li>
<li><a href="https://youtu.be/k55d3ZUF3ZQ">Luciano Ramalho &ndash; Pythonic Objects: Implementing Productive APIs</a></li>
<li><a href="https://youtu.be/6zQAu23bKF8">Harry Percival &ndash; Outside-In TDD &ndash; PyCon 2016</a></li>
<li><a href="https://youtu.be/RAxiiRPHS9k">Gary Bernhardt Fast Test Slow Test</a></li>
<li><a href="https://youtu.be/frZrBgWHJdY">Alex Martelli &ndash; Exception and error handling in Python 2 and Python 3 &ndash; PyCon 2016</a></li>
<li><a href="https://youtu.be/E9wS6LdXM8Y">Thomas Ballinger &ndash; Finding closure with closures &ndash; PyCon 2016</a></li>
<li><a href="https://youtu.be/bAcfPzxB3dk">Ned Batchelder &ndash; Machete-mode debugging &ndash; PyCon 2016</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Modern C Programming]]></title>
    <link href="http://kmggh.github.io/m149daily-blog//blog/2016/01/08/modern-c-programming/"/>
    <updated>2016-01-08T21:13:00-05:00</updated>
    <id>http://kmggh.github.io/m149daily-blog//blog/2016/01/08/modern-c-programming</id>
    <content type="html"><![CDATA[<p>It&rsquo;s been a while since I&rsquo;ve written any serious C programs, but I
found this post via Hacker News quite thorough.</p>

<p><a href="https://matt.sh/howto-c">How to C in 2016</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Write a Python Web Framework]]></title>
    <link href="http://kmggh.github.io/m149daily-blog//blog/2015/11/21/write-a-python-web-framework/"/>
    <updated>2015-11-21T05:17:00-05:00</updated>
    <id>http://kmggh.github.io/m149daily-blog//blog/2015/11/21/write-a-python-web-framework</id>
    <content type="html"><![CDATA[<p>You don&rsquo;t have to use Django, Flask, Cherrypy, or even web.py.  It&rsquo;s
all about WSGI.  Guess what.  Everything you need is already built
into Python.  After all, Python promises &ldquo;batteries included.&rdquo;</p>

<p><a href="http://funwithlinux.net/2015/11/how-to-write-a-python-web-framework-from-scratch/">How To Write a Python Web Framework From Scratch</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Explicit Programming]]></title>
    <link href="http://kmggh.github.io/m149daily-blog//blog/2015/10/02/explicit-programming/"/>
    <updated>2015-10-02T02:44:00-04:00</updated>
    <id>http://kmggh.github.io/m149daily-blog//blog/2015/10/02/explicit-programming</id>
    <content type="html"><![CDATA[<p>An excellent article that shows how being more explicit in the code
makes for programs that are more readable.</p>

<p><a href="https://www.dzombak.com/blog/2014/07/explicit-programming.html">Explicit Programming</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Service Oriented Architecture]]></title>
    <link href="http://kmggh.github.io/m149daily-blog//blog/2015/10/02/service-oriented-architecture/"/>
    <updated>2015-10-02T02:36:00-04:00</updated>
    <id>http://kmggh.github.io/m149daily-blog//blog/2015/10/02/service-oriented-architecture</id>
    <content type="html"><![CDATA[<p>Here&rsquo;s an interesting article about Uber&rsquo;s use of service oriented
architecture (SOA).</p>

<blockquote><p>As core domain models grew and new features were introduced, our
components became tightly coupled, and enforcing encapsulation made
separation of concerns difficult. Continuous integration turned into a
liability because deploying the codebase meant deploying everything at
once. Our engineering team experienced rapid growth and scaling, which
not only meant handling more requests but also handling a significant
increase in developer activity. Adding new features, fixing bugs, and
resolving technical debt all in a single repo became extremely
difficult. Tribal knowledge was required before attempting to make a
single change.</p></blockquote>

<p><a href="https://eng.uber.com/soa/">Service-Oriented Architecture: Scaling Our Codebase As We Grow</a></p>

<p><a href="http://martinfowler.com/articles/microservices.html">Microservices</a></p>

<p><a href="https://en.wikipedia.org/wiki/Service-oriented_architecture">SOA on Wikipedia</a></p>
]]></content>
  </entry>
  
</feed>
