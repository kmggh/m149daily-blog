<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: programming | Monolith149 Daily]]></title>
  <link href="http://kmggh.github.io/m149daily-blog//blog/categories/programming/atom.xml" rel="self"/>
  <link href="http://kmggh.github.io/m149daily-blog//"/>
  <updated>2016-09-26T07:02:30-04:00</updated>
  <id>http://kmggh.github.io/m149daily-blog//</id>
  <author>
    <name><![CDATA[Ken Guyton]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Squeak - Back to the Future]]></title>
    <link href="http://kmggh.github.io/m149daily-blog//blog/2016/09/26/squeak-back-to-the-future/"/>
    <updated>2016-09-26T06:45:00-04:00</updated>
    <id>http://kmggh.github.io/m149daily-blog//blog/2016/09/26/squeak-back-to-the-future</id>
    <content type="html"><![CDATA[<p>I still love Squeak Smalltalk.  A pointer to this paper was posted on
Hacker News Today.</p>

<p>Back to the Future<br />
The Story of Squeak, A Practical Smalltalk Written in Itself</p>

<p>by</p>

<p>Dan Ingalls, Ted Kaehler, John Maloney, Scott Wallace, Alan Kay</p>

<p><a href="http://ftp.squeak.org/docs/OOPSLA.Squeak.html">Back to the Future</a></p>

<p><a href="https://news.ycombinator.com/item?id=12577087">Hacker News posting</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Appropriate Uses for SQLite]]></title>
    <link href="http://kmggh.github.io/m149daily-blog//blog/2016/09/26/appropriate-uses-for-sqlite/"/>
    <updated>2016-09-26T06:41:00-04:00</updated>
    <id>http://kmggh.github.io/m149daily-blog//blog/2016/09/26/appropriate-uses-for-sqlite</id>
    <content type="html"><![CDATA[<p>From sqlite.org, <a href="https://sqlite.org/whentouse.html">Appropriate Uses For SQLite</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[No Microservices?]]></title>
    <link href="http://kmggh.github.io/m149daily-blog//blog/2016/09/23/no-microservices/"/>
    <updated>2016-09-23T23:02:00-04:00</updated>
    <id>http://kmggh.github.io/m149daily-blog//blog/2016/09/23/no-microservices</id>
    <content type="html"><![CDATA[<p>An article titled &ldquo;Microservices – Please, don’t&rdquo; caught my eye, but I
think the author has it wrong.  It&rsquo;s true we&rsquo;ve been using the micro
service approach at work, building REST/JSON servers to provice APIs,
and I have been questioning whether this is the best approach.</p>

<!-- More -->


<p>This author says that these are &ldquo;truths&rdquo; &ldquo;that people believe about
this approach&hellip;.&rdquo;</p>

<ol>
<li>It keeps the code cleaner</li>
<li>It’s easy to write things that only have one purpose</li>
<li>They’re faster than monoliths</li>
<li>It’s easy for engineers to not all work in the same codebase</li>
<li>It’s the simplest way to handle autoscaling, plus Docker is in here somewhere</li>
</ol>


<p>None of these have ever been my motivation for micro services.   I
never thought 1. was the case.  Clean code is the result of good style
and discipline, and readability in writing code.</p>

<p>Similarly, I&rsquo;m not sure what 2. has to do with micro services.  I can
write modules, objects, or functions that have only one purpose.</p>

<p>I never thought 3. was true but actually the opposite.  We&rsquo;re
replacing a local function call with a network transaction.</p>

<p>Similarly, 4. is also just not true.  Whether micro services are in
the picture or not, I take it as a given that code is properly divided
into reasonable components with well-defined interfaces and that are
loosely coupled.</p>

<p>I doubt that 5. is true, but it might be.  Scale has never been a
consideration in my thinking about micro services.</p>

<p>Here are some reasons that have been part of my thought process.</p>

<ol>
<li><p>The API is language independent.  A program written in Java can
send an HTTP request as easily as a Python program, or a program in
any other language can.</p></li>
<li><p>The API is easy to test with something as simple as curl.</p></li>
<li><p>The API and HTTP request can cross network boundaries and into
different security domains, if permission is set up.</p></li>
<li><p>If a component needs to be recompiled, the micro services don&rsquo;t
need to be recompiled.</p></li>
<li><p>The micro service can be updated independently of the using code and
the clients all get the update immediately and with no changes.</p></li>
</ol>


<p>There are downsides I have worried about, though.  They include
standing up and maintaining so many services along with a lot of extra
network traffic.  It&rsquo;s also true that a well written library module is
easier to use and test in many ways.  The recompiling is not
necessarily a large cost.</p>

<p>On a very recent project at work, we went back to using libraries for
all of the application layers and components.  It&rsquo;s nice not to have
to stand up those services, but I&rsquo;ll find out if I miss some of those
advantages of the micro services.</p>

<h2>References</h2>

<p><a href="http://basho.com/posts/technical/microservices-please-dont/">Microservices – Please, don’t</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Time for Python 3]]></title>
    <link href="http://kmggh.github.io/m149daily-blog//blog/2016/09/23/time-for-python-3/"/>
    <updated>2016-09-23T20:07:00-04:00</updated>
    <id>http://kmggh.github.io/m149daily-blog//blog/2016/09/23/time-for-python-3</id>
    <content type="html"><![CDATA[<p>In watching Pycon 2016 vidoes and other reading, I&rsquo;ve been struck with
the notion that it&rsquo;s actually time to move to Python 3.  More than
once in the sessions I&rsquo;ve heard a comment like &ldquo;We&rsquo;ll be using Python
3.  If you haven&rsquo;t moved to Python 3 yet, what&rsquo;s stopping you?&rdquo;</p>

<!-- More -->


<p>Good question.  There&rsquo;s the issue of some libraries not supporting
Python 3 but, in my humble beginnings, I haven&rsquo;t run into any yet.</p>

<p>Strings and UTF-8 are by far the stickiest set of issues I&rsquo;ve
encountered, but it&rsquo;s usually just a case of fixing them.  And really
I&rsquo;ve only tried converting one old program.  For new programs I&rsquo;m more
and more starting them right off in Python 3.</p>

<p>However, it&rsquo;s really recommended that you write code that runs in
both.  That takes a bit more effort and is a little more tricky.</p>

<p>Stay tuned.  I&rsquo;ll maybe update on that part next.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Python Videos]]></title>
    <link href="http://kmggh.github.io/m149daily-blog//blog/2016/09/20/python-videos/"/>
    <updated>2016-09-20T23:42:00-04:00</updated>
    <id>http://kmggh.github.io/m149daily-blog//blog/2016/09/20/python-videos</id>
    <content type="html"><![CDATA[<p>Lately I&rsquo;ve been watching some of the videos from Pycon and have found
these to be quite excellent.</p>

<!-- More -->


<ul>
<li><a href="https://youtu.be/G-uKNd5TSBw">Keynote &ndash; Guido van Rossum &ndash; PyCon 2015</a></li>
<li><a href="https://youtu.be/YgtL4S7Hrwo">Guido van Rossum &ndash; Python Language &ndash; PyCon 2016</a></li>
<li><a href="https://youtu.be/KPzDX5TX5HE">Brett Cannon &ndash; How to make your code Python 2/3 compatible &ndash; PyCon 2015</a></li>
<li><a href="https://youtu.be/k55d3ZUF3ZQ">Luciano Ramalho &ndash; Pythonic Objects: Implementing Productive APIs</a></li>
<li><a href="https://youtu.be/6zQAu23bKF8">Harry Percival &ndash; Outside-In TDD &ndash; PyCon 2016</a></li>
<li><a href="https://youtu.be/RAxiiRPHS9k">Gary Bernhardt Fast Test Slow Test</a></li>
<li><a href="https://youtu.be/frZrBgWHJdY">Alex Martelli &ndash; Exception and error handling in Python 2 and Python 3 &ndash; PyCon 2016</a></li>
<li><a href="https://youtu.be/E9wS6LdXM8Y">Thomas Ballinger &ndash; Finding closure with closures &ndash; PyCon 2016</a></li>
<li><a href="https://youtu.be/bAcfPzxB3dk">Ned Batchelder &ndash; Machete-mode debugging &ndash; PyCon 2016</a></li>
</ul>

]]></content>
  </entry>
  
</feed>
