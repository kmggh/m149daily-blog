<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: programming | Monolith149 Daily]]></title>
  <link href="http://kmggh.github.io/m149daily-blog//blog/categories/programming/atom.xml" rel="self"/>
  <link href="http://kmggh.github.io/m149daily-blog//"/>
  <updated>2015-10-01T06:12:49-04:00</updated>
  <id>http://kmggh.github.io/m149daily-blog//</id>
  <author>
    <name><![CDATA[Ken Guyton]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Poor Performance of Javascript on Android]]></title>
    <link href="http://kmggh.github.io/m149daily-blog//blog/2015/10/01/poor-performance-of-javascript-on-android/"/>
    <updated>2015-10-01T06:05:00-04:00</updated>
    <id>http://kmggh.github.io/m149daily-blog//blog/2015/10/01/poor-performance-of-javascript-on-android</id>
    <content type="html"><![CDATA[<p>In a posted discussion Jeff Atwood claims that, &ldquo;For several years now
we&rsquo;ve tracked the fact that, over time from 2012 onward, Android
JavaScript performance has become wildly divergent from iOS JavaScript
performance. And not in a good way.&rdquo;</p>

<p>He says:</p>

<blockquote><p>This is the benchmark most representative of Discourse performance,
and the absolute best known Android score for this benchmark is right
at ~400ms on a Samsung Galaxy S6. That doesn&rsquo;t seem too bad until you
compare..</p>

<p>iPhone 5 → 340ms<br />
iPhone 5s → 175ms<br />
iPhone 6 → 140ms<br />
iPad Air 2 → 120ms<br />
iPhone 6s → 60-70ms</p>

<p>In a nutshell, the fastest known Android device available today &mdash; and
there are millions of Android devices much slower than that out there
&mdash; performs 5× slower than a new iPhone 6s, and a little worse than a
2012 era iPhone 5 in Ember. How depressing.</p></blockquote>

<p><a href="https://meta.discourse.org/t/the-state-of-javascript-on-android-in-2015-is-poor/33889">The State of JavaScript on Android in 2015 is… poor</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Bazaar]]></title>
    <link href="http://kmggh.github.io/m149daily-blog//blog/2015/01/14/bazaar/"/>
    <updated>2015-01-14T07:33:00-05:00</updated>
    <id>http://kmggh.github.io/m149daily-blog//blog/2015/01/14/bazaar</id>
    <content type="html"><![CDATA[<p>From looking at my development directories, it appears that it was in
early 2008 that I moved my personal source code control system from
CVS to Bazaar.  (Before that I&rsquo;d used RCS and even SCCS) I learned
about Bazaar from a coworker, John.  It was Python-based, the system
used by Canonical for Ubuntu and I found it to work extremely well.
Since then, for seven years now, I&rsquo;ve used it for my personal version
management and also as a shadow version control system at work.</p>

<p>It has been extremely stable for me, fast, and I can&rsquo;t think of any
trouble I&rsquo;ve ever had with Bazaar.  However, lately I&rsquo;ve seen
indications that Bazaar is no longer maintained and may be declining
as a version control choice.  Maybe it was never that popular.</p>

<p>Lately, Git seems to be the version control system of choice and it is
the system I use every day for work.  I&rsquo;m wondering if I should start
using it for my personal work.  The command set and, as they say, &ldquo;the
workflow&rdquo; is different.  It&rsquo;s not friendly to large binary blobs.
That&rsquo;s probably okay.</p>

<p>I already like it less because, if I want to make a branch of a
particular version or another branch to work on, there needs to be a
root branch of sorts, a hub to clone the other branch from.  With
Bazaar you can just branch any branch, merge changes from it, etc.  So
now I&rsquo;ll have to make some local hub to clone, push and pull from.
Yech.  That seems so archaic now.</p>

<p>However, I found this blog post by Jelmer Vernooij who was a primary
developer of Bazaar.  He basically tells the complete history and also
how it&rsquo;s finally been abandoned for the most part.  So, I guess I
should start moving on to git.</p>

<p>I won&rsquo;t even try to convert over my current bzr projects.  There is
Mercurial which may be worth a look.  Ah well.</p>

<blockquote><p>Contributions from people outside of the Canonical Bazaar team had
become rare by mid-2011. In early 2012 the members of the Canonical
Bazaar team were assigned to other projects, though we would still fix
the occasional bug in Bazaar. Martin left Canonical in April 2012.</p>

<p>During my spare time in the first 6 months of 2012 I tried to finish
my remaining in-progress branches. After that, I thought I would see
how it would go.</p>

<p>I think it&rsquo;s time to move on. There are still some things I don&rsquo;t like
about it, but Git is a decent source code management system. Bazaar
isn&rsquo;t going anywhere; no doubt there will be users for a few years to
come, and people contributing fixes, but it hasn&rsquo;t been adopted to the
level I was hoping.</p></blockquote>

<p><a href="https://www.stationary-traveller.eu/pages/bzr-a-retrospective.html">Bazaar-NG: 7 years of hacking on a distributed version control system</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Siracusa on Swift]]></title>
    <link href="http://kmggh.github.io/m149daily-blog//blog/2014/12/20/siracusa-on-swift/"/>
    <updated>2014-12-20T13:05:00-05:00</updated>
    <id>http://kmggh.github.io/m149daily-blog//blog/2014/12/20/siracusa-on-swift</id>
    <content type="html"><![CDATA[<p>John Siracusa&rsquo;s review of each OS X version are legendary, but the
10.10 article has a nice dive down into some of the details of the new
Swift language and how it&rsquo;s compiled.  There are some impressive
features here.</p>

<p><a href="http://arstechnica.com/apple/2014/10/os-x-10-10/21/#swift">OS X 10.10 Yosemite: The Ars Technica Review, Swift</a><br />
<a href="https://developer.apple.com/swift/">Introducing Swift at Apple Developer</a><br /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Go and Swift]]></title>
    <link href="http://kmggh.github.io/m149daily-blog//blog/2014/12/10/go-and-swift/"/>
    <updated>2014-12-10T07:57:00-05:00</updated>
    <id>http://kmggh.github.io/m149daily-blog//blog/2014/12/10/go-and-swift</id>
    <content type="html"><![CDATA[<p>Scott Rosenberg writes &ldquo;Code of Ages, Go and Swift take another step
up the programming-language ladder.&rdquo;</p>

<p><a href="https://medium.com/backchannel/my-computer-language-is-better-than-yours-58d9c9523644">From Medium</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Programming for Kids]]></title>
    <link href="http://kmggh.github.io/m149daily-blog//blog/2014/11/18/programming-for-kids/"/>
    <updated>2014-11-18T06:26:00-05:00</updated>
    <id>http://kmggh.github.io/m149daily-blog//blog/2014/11/18/programming-for-kids</id>
    <content type="html"><![CDATA[<p>There&rsquo;s a question that have been worrying many of us for quite a few
years now.  How will today&rsquo;s kids learn to program?</p>

<p>In the late 70s and 80s many kids were blessed with a microcomputer in
their home that ran BASIC.  Most folks don&rsquo;t even know or remember
that the first IBM PC booted straight up into BASIC, just like a
Commodore 64. That&rsquo;s where they learned to program.  Those BASIC
computers launched a whole generation of computer programmers.</p>

<!-- More -->


<p>But then, as time went on, computers no longer came with BASIC.
Magazines no longer published programs that you had to type in, line
by line, hopefully with an input program that gave a little checksum
for each line to match with the checksum in the original listing.
I&rsquo;ve thought about this for many years and the topic has been raised
by others, even on sites like Slashdot over the years.  How will kids
learn to program?</p>

<p>Java seemed too complex for kids to really latch on to.  There were
plenty of little learning languages here and there, but they didn&rsquo;t
just pop up on the family computer when you turned it on&mdash;-someone had
to go looking for them and install them.</p>

<p>Some people speculated that making web pages might capture the modern
youth&rsquo;s enthusiasm.  But (at least normal) HTML doesn&rsquo;t have the
concept of a conditional if-then clause.  I consider that an essential
element of programming.</p>

<p>I used to think how it would be nice if there was something like a
world, as in object-oriented MUDs, where you could program little
objects to do conditional things.  That would be like building a web
page or something, but you could make things &ldquo;smart&rdquo; so they responded
to changes in their surroundings or to inputs.</p>

<p>Lately I&rsquo;ve been hearing a pattern.  I&rsquo;ve heard it at least a couple
of times and I bet it&rsquo;s happening more.  Kids are learning to program
via the path Minecraft, Scratch, Python.</p>

<p>Minecraft is a game where you can build an program objects.  And it
does have conditionals!  Nearly every kid seems to be playing
Minecraft.</p>

<p>Scratch is a wonderful programming language based on clicking little
objects together that do things.  It&rsquo;s the perfect programming
paradigm for youngsters.  Scratch was developed at the MIT Media Lab.</p>

<p>Finally, there&rsquo;s Python, which I consider the perfect programming
language for a majority of purposes including a first real programming
language.</p>

<p>I think this is the perfect path.  Minecraft is wonderfully engaging
and pretty much universally present.  Scratch has all of the
fundamental elements you need, and it&rsquo;s still fun.  Python is
complete, readily available, and programs can be as easy as BASIC but
can grow into fully developed object-oriented or even functional
applications.</p>

<p>It&rsquo;s highly likely I won&rsquo;t even understand what the
Minecraft-Scratch-Python generation produces as adults, but I&rsquo;m sure
it will be wonderful!</p>

<p><a href="http://en.wikipedia.org/wiki/BASIC">BASIC</a><br />
<a href="https://minecraft.net/">Minecraft</a><br />
<a href="http://scratch.mit.edu/">Scratch</a><br />
<a href="http://monolith149daily.blogspot.com/2008/10/scratch-programming-for-kids.html">My Scratch Programming blog post, 2008-10-02</a><br />
<a href="https://www.python.org/">Python</a><br /></p>

<p>P.S.  Yes, I know that there are, in fact, many tools around for kids
to learn from.  Even Logo and of course BASIC are still around!  They
just aren&rsquo;t universally present by default on the home computer until
someone puts them there.</p>

<p>P.P.S.  And it&rsquo;s also true that the Raspberry Pi was intentionally
created to fill this void with hardware that nearly any kid could
afford and just hook to their TV and power with their phone charger.
(You do need a keyboard and mouse).  Not coincidentally, it comes with
Scratch and Python ready to go and can be configured to boot straight
into those environments.</p>
]]></content>
  </entry>
  
</feed>
