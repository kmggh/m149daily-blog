<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: programming | Monolith149 Daily]]></title>
  <link href="http://kmggh.github.io/m149daily-blog//blog/categories/programming/atom.xml" rel="self"/>
  <link href="http://kmggh.github.io/m149daily-blog//"/>
  <updated>2014-11-10T05:13:04-05:00</updated>
  <id>http://kmggh.github.io/m149daily-blog//</id>
  <author>
    <name><![CDATA[Ken Guyton]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Programming Languages]]></title>
    <link href="http://kmggh.github.io/m149daily-blog//blog/2014/10/28/programming-languages/"/>
    <updated>2014-10-28T05:27:00-04:00</updated>
    <id>http://kmggh.github.io/m149daily-blog//blog/2014/10/28/programming-languages</id>
    <content type="html"><![CDATA[<p><a href="/blog/2014/10/11/blogging-for-30-days/">Day 18</a></p>

<p>I recently made a list of the program&rsquo;s I&rsquo;ve written that I&rsquo;d consider
my favorites.  Then I made a list of the programming languages I had
used.  I think the result would qualify as a list of my favorite
programming languages.</p>

<ul>
<li>FORTRAN</li>
<li>BASIC</li>
<li>SNOBOL</li>
<li>Pascal</li>
<li>C</li>
<li>Objective-C</li>
<li>Perl</li>
<li>Python</li>
</ul>


<p>I&rsquo;m pretty sure I&rsquo;ve written more code over the years in Perl and
Python.  I&rsquo;m not sure which would be in the lead at this point.</p>

<p>Two other languages, Smalltalk and LISP, are languages I really enjoy
but only in an occasional, recreational sense.  I&rsquo;ve never found either to be
useful for anything very practical.  However, it&rsquo;s a joy to write pure
object-oriented code in the wondrous Smalltalk-80-based environment of
Squeak.  Similarly, it&rsquo;s a thrill to write pure functional programs in
LISP, using Racket Scheme.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Learning Python]]></title>
    <link href="http://kmggh.github.io/m149daily-blog//blog/2014/10/25/learning-python/"/>
    <updated>2014-10-25T06:14:00-04:00</updated>
    <id>http://kmggh.github.io/m149daily-blog//blog/2014/10/25/learning-python</id>
    <content type="html"><![CDATA[<p><a href="/blog/2014/10/11/blogging-for-30-days/">Day 15</a></p>

<p>What&rsquo;s the best way to learn the Python programming language?  I think
the on-line tutorial at python.org is the fastest but it works best if
Python isn&rsquo;t your first language.</p>

<!-- More -->


<h2>Backing Up</h2>

<p>I think Python is nearly the perfect language.  Okay, it&rsquo;s not really
perfect, but it&rsquo;s as close as any I can think of.  There are other
languages that might be better for some extreme, specialized cases
(which will not seem extreme or specialized to anyone who works on
them every day) such as very low-level system programming, programs
where performance is critical, maybe very large corporate software
systems (though I&rsquo;d claim Python still holds it&rsquo;s own here), as just a
few examples.</p>

<p>However, even in those instances, Python does okay.</p>

<p>There are languages for other ways of thinking about programming like
the functional languages Haskell, LISP, etc.</p>

<p>What&rsquo;s great about Python is that it&rsquo;s short, clear, easy to write
once you get the hang of it, very easy to read, and it can handle
programs that range from short little scripts to very large, complex
systems.</p>

<h2>If You&rsquo;ve Programmed Before</h2>

<p>If you&rsquo;ve written programs before, in any programming language, then
you&rsquo;ll probably be fine using the on-line tutorial for Python.  It&rsquo;s
free and on-line at Python&rsquo;s own website,
<a href="https://docs.python.org/2/tutorial/">https://docs.python.org/2/tutorial/</a>.</p>

<p>Start with chapter 1, then do 2-4.  Then skip to chapter 7 with more
input/output.  After than follow up with 5.  You can add the
additional chapters later, as you either need to or are interested.</p>

<h2>If You&rsquo;re a Beginner</h2>

<p>I can&rsquo;t say I&rsquo;ve found any beginning books that I&rsquo;ve looked at and
thought, &ldquo;Yes!  That&rsquo;s the ideal Python book for a beginning
programmer.&rdquo;  I am completely convinced that Python is the best
language for learning to program since Pascal.</p>

<p>The book <em>Learn Python the Hard Way</em> Third Edition by Zed A. Shaw,
Addison-Wesley Professional, 2013, seems pretty good and complete, but
it seems slow and plodding to me.  That approach may be perfect for
you.  Pace is always relative.  The book is free on-line, available as
a PDF you can download, or you can buy the on-line version and get the
accompanying videos or buy the regular book.</p>

<p>There seem to be thousands of vidoes teaching you Python on Youtube.
As far as I&rsquo;ve looked, I&rsquo;ve not found one that I like.  There are many
that are okay, but none that I&rsquo;ve bothered to write the URL down for.</p>

<p>The book <em>Learning Python</em> Fifth Edition by Mark Lutz, O'Reilly Media,
2013 is 1600 pages! It&rsquo;s hard for me to understand how you could make
a book on Python that long and I have looked it over.  I&rsquo;m not saying
it&rsquo;s not a good book, it&rsquo;s apparently complete and I believe it
includes exercises and the new Python 3 version.  Still, wow!</p>

<p>If you&rsquo;re a beginner, I think I&rsquo;d still say take a look at Python&rsquo;s
on-line tutorial and see if it works for you.  Try all of the
examples.  If you run into any trouble, go to one of these other
books for that part or look for some videos on Youtube on the specific
topic.  Then go back and carry on with the tutorial.</p>

<h2>What About Java?</h2>

<p>And what about Java as a first language?  Well, here&rsquo;s the traditional
first program that prints out &ldquo;Hello, World!&rdquo; in Java:</p>

<pre><code>public class HelloWorld {
    public static void main(String[] args) {
        System.out.println("Hello, World!");
    }
}
</code></pre>

<p>Compare the same program in Python.</p>

<pre><code>print "Hello, World!"
</code></pre>

<p>Now, I understand why the Java program looks they way it does and
there are valid reasons for it&rsquo;s verbosity and what&rsquo;s going on there.
However, I&rsquo;ve used Python in many large programs and haven&rsquo;t missed
the features of Java even once (knock on wood).  I will admit, though,
that I&rsquo;m strangely drawn to Java. I remember when it first came on the
scene. I don&rsquo;t dislike it.  I&rsquo;ve just never found a use for it other
than interacting with systems or services that only support Java.</p>

<h2>References</h2>

<p><a href="https://docs.python.org/2/tutorial/">The Python Tutorial</a><br />
<a href="http://learnpythonthehardway.org/">Learn Python The Hard Way</a><br /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Python vs. Javascript]]></title>
    <link href="http://kmggh.github.io/m149daily-blog//blog/2014/03/01/python-vs-javascript/"/>
    <updated>2014-03-01T14:19:00-05:00</updated>
    <id>http://kmggh.github.io/m149daily-blog//blog/2014/03/01/python-vs-javascript</id>
    <content type="html"><![CDATA[<p>I&rsquo;ve been reluctantly learning some Javascript recently.  While
looking for a good summary of a feature comparison between Python and
Javascript, I found this blog post by Matt Chisholm, <a href="https://blog.glyphobet.net/essay/2557">A tour of the differences between JavaScript and Python</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Smalltalk runtime in the browser]]></title>
    <link href="http://kmggh.github.io/m149daily-blog//blog/2013/08/18/smalltalk-runtime-in-the-browser/"/>
    <updated>2013-08-18T05:33:00-04:00</updated>
    <id>http://kmggh.github.io/m149daily-blog//blog/2013/08/18/smalltalk-runtime-in-the-browser</id>
    <content type="html"><![CDATA[<p><img class="center" src="/postimages/amber.png"></p>

<p>Via <a href="https://twitter.com/HNTweets/status/367911066203729920">@HNTweets</a></p>

<p>Smalltalk runtime in the browser: <a href="http://amber-lang.net/">http://amber-lang.net/</a> Comments: <a href="https://news.ycombinator.com/item?id=6216539">https://news.ycombinator.com/item?id=6216539</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[The UNIX Tree]]></title>
    <link href="http://kmggh.github.io/m149daily-blog//blog/2013/06/25/the-unix-tree/"/>
    <updated>2013-06-25T23:06:00-04:00</updated>
    <id>http://kmggh.github.io/m149daily-blog//blog/2013/06/25/the-unix-tree</id>
    <content type="html"><![CDATA[<p><img class="center" src="/postimages/20130625_Ritchie_Thompson.jpg" title="" ></p>

<blockquote><p>Welcome to the <a href="http://minnie.tuhs.org/cgi-bin/utree.pl">Unix Tree</a>. Here you can browse the source code and
manuals of various old versions of Unix. For every file, you can
also find related files from other versions: this can help show how
the different versions of Unix are related. Most of the Unix
versions below come from the <a href="http://www.tuhs.org/wiki/Unix_Archive_Sites">Unix Archive</a>.</p></blockquote>

<p><em>Image: Dennis Ritchie and Ken Thompson at a pretty well maxed out DEC
 PDP11 computer and two Teletype model 33 terminals.
 <a href="http://www.flickr.com/photos/9479603@N02/3311745151/">PanelSwitchman at Flickr. CC BY-NC-ND 2.0</a></em></p>
]]></content>
  </entry>
  
</feed>
