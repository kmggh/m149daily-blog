<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: programming | Monolith149 Daily]]></title>
  <link href="http://kmggh.github.io/m149daily-blog//blog/categories/programming/atom.xml" rel="self"/>
  <link href="http://kmggh.github.io/m149daily-blog//"/>
  <updated>2015-10-02T02:47:08-04:00</updated>
  <id>http://kmggh.github.io/m149daily-blog//</id>
  <author>
    <name><![CDATA[Ken Guyton]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Explicit Programming]]></title>
    <link href="http://kmggh.github.io/m149daily-blog//blog/2015/10/02/explicit-programming/"/>
    <updated>2015-10-02T02:44:00-04:00</updated>
    <id>http://kmggh.github.io/m149daily-blog//blog/2015/10/02/explicit-programming</id>
    <content type="html"><![CDATA[<p>An excellent article that shows how being more explicit in the code
makes for programs that are more readable.</p>

<p><a href="https://www.dzombak.com/blog/2014/07/explicit-programming.html">Explicit Programming</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Service Oriented Architecture]]></title>
    <link href="http://kmggh.github.io/m149daily-blog//blog/2015/10/02/service-oriented-architecture/"/>
    <updated>2015-10-02T02:36:00-04:00</updated>
    <id>http://kmggh.github.io/m149daily-blog//blog/2015/10/02/service-oriented-architecture</id>
    <content type="html"><![CDATA[<p>Here&rsquo;s an interesting article about Uber&rsquo;s use of service oriented
architecture (SOA).</p>

<blockquote><p>As core domain models grew and new features were introduced, our
components became tightly coupled, and enforcing encapsulation made
separation of concerns difficult. Continuous integration turned into a
liability because deploying the codebase meant deploying everything at
once. Our engineering team experienced rapid growth and scaling, which
not only meant handling more requests but also handling a significant
increase in developer activity. Adding new features, fixing bugs, and
resolving technical debt all in a single repo became extremely
difficult. Tribal knowledge was required before attempting to make a
single change.</p></blockquote>

<p><a href="https://eng.uber.com/soa/">Service-Oriented Architecture: Scaling Our Codebase As We Grow</a></p>

<p><a href="http://martinfowler.com/articles/microservices.html">Microservices</a></p>

<p><a href="https://en.wikipedia.org/wiki/Service-oriented_architecture">SOA on Wikipedia</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Poor Performance of Javascript on Android]]></title>
    <link href="http://kmggh.github.io/m149daily-blog//blog/2015/10/01/poor-performance-of-javascript-on-android/"/>
    <updated>2015-10-01T06:05:00-04:00</updated>
    <id>http://kmggh.github.io/m149daily-blog//blog/2015/10/01/poor-performance-of-javascript-on-android</id>
    <content type="html"><![CDATA[<p>In a posted discussion Jeff Atwood claims that, &ldquo;For several years now
we&rsquo;ve tracked the fact that, over time from 2012 onward, Android
JavaScript performance has become wildly divergent from iOS JavaScript
performance. And not in a good way.&rdquo;</p>

<p>He says:</p>

<blockquote><p>This is the benchmark most representative of Discourse performance,
and the absolute best known Android score for this benchmark is right
at ~400ms on a Samsung Galaxy S6. That doesn&rsquo;t seem too bad until you
compare..</p>

<p>iPhone 5 → 340ms<br />
iPhone 5s → 175ms<br />
iPhone 6 → 140ms<br />
iPad Air 2 → 120ms<br />
iPhone 6s → 60-70ms</p>

<p>In a nutshell, the fastest known Android device available today &mdash; and
there are millions of Android devices much slower than that out there
&mdash; performs 5× slower than a new iPhone 6s, and a little worse than a
2012 era iPhone 5 in Ember. How depressing.</p></blockquote>

<p><a href="https://meta.discourse.org/t/the-state-of-javascript-on-android-in-2015-is-poor/33889">The State of JavaScript on Android in 2015 is… poor</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Bazaar]]></title>
    <link href="http://kmggh.github.io/m149daily-blog//blog/2015/01/14/bazaar/"/>
    <updated>2015-01-14T07:33:00-05:00</updated>
    <id>http://kmggh.github.io/m149daily-blog//blog/2015/01/14/bazaar</id>
    <content type="html"><![CDATA[<p>From looking at my development directories, it appears that it was in
early 2008 that I moved my personal source code control system from
CVS to Bazaar.  (Before that I&rsquo;d used RCS and even SCCS) I learned
about Bazaar from a coworker, John.  It was Python-based, the system
used by Canonical for Ubuntu and I found it to work extremely well.
Since then, for seven years now, I&rsquo;ve used it for my personal version
management and also as a shadow version control system at work.</p>

<p>It has been extremely stable for me, fast, and I can&rsquo;t think of any
trouble I&rsquo;ve ever had with Bazaar.  However, lately I&rsquo;ve seen
indications that Bazaar is no longer maintained and may be declining
as a version control choice.  Maybe it was never that popular.</p>

<p>Lately, Git seems to be the version control system of choice and it is
the system I use every day for work.  I&rsquo;m wondering if I should start
using it for my personal work.  The command set and, as they say, &ldquo;the
workflow&rdquo; is different.  It&rsquo;s not friendly to large binary blobs.
That&rsquo;s probably okay.</p>

<p>I already like it less because, if I want to make a branch of a
particular version or another branch to work on, there needs to be a
root branch of sorts, a hub to clone the other branch from.  With
Bazaar you can just branch any branch, merge changes from it, etc.  So
now I&rsquo;ll have to make some local hub to clone, push and pull from.
Yech.  That seems so archaic now.</p>

<p>However, I found this blog post by Jelmer Vernooij who was a primary
developer of Bazaar.  He basically tells the complete history and also
how it&rsquo;s finally been abandoned for the most part.  So, I guess I
should start moving on to git.</p>

<p>I won&rsquo;t even try to convert over my current bzr projects.  There is
Mercurial which may be worth a look.  Ah well.</p>

<blockquote><p>Contributions from people outside of the Canonical Bazaar team had
become rare by mid-2011. In early 2012 the members of the Canonical
Bazaar team were assigned to other projects, though we would still fix
the occasional bug in Bazaar. Martin left Canonical in April 2012.</p>

<p>During my spare time in the first 6 months of 2012 I tried to finish
my remaining in-progress branches. After that, I thought I would see
how it would go.</p>

<p>I think it&rsquo;s time to move on. There are still some things I don&rsquo;t like
about it, but Git is a decent source code management system. Bazaar
isn&rsquo;t going anywhere; no doubt there will be users for a few years to
come, and people contributing fixes, but it hasn&rsquo;t been adopted to the
level I was hoping.</p></blockquote>

<p><a href="https://www.stationary-traveller.eu/pages/bzr-a-retrospective.html">Bazaar-NG: 7 years of hacking on a distributed version control system</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Siracusa on Swift]]></title>
    <link href="http://kmggh.github.io/m149daily-blog//blog/2014/12/20/siracusa-on-swift/"/>
    <updated>2014-12-20T13:05:00-05:00</updated>
    <id>http://kmggh.github.io/m149daily-blog//blog/2014/12/20/siracusa-on-swift</id>
    <content type="html"><![CDATA[<p>John Siracusa&rsquo;s review of each OS X version are legendary, but the
10.10 article has a nice dive down into some of the details of the new
Swift language and how it&rsquo;s compiled.  There are some impressive
features here.</p>

<p><a href="http://arstechnica.com/apple/2014/10/os-x-10-10/21/#swift">OS X 10.10 Yosemite: The Ars Technica Review, Swift</a><br />
<a href="https://developer.apple.com/swift/">Introducing Swift at Apple Developer</a><br /></p>
]]></content>
  </entry>
  
</feed>
